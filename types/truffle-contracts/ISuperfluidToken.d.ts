/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISuperfluidTokenContract
  extends Truffle.Contract<ISuperfluidTokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISuperfluidTokenInstance>;
}

export interface AgreementCreated {
  name: "AgreementCreated";
  args: {
    agreementClass: string;
    id: string;
    data: string[];
    0: string;
    1: string;
    2: string[];
  };
}

export interface AgreementLiquidated {
  name: "AgreementLiquidated";
  args: {
    agreementClass: string;
    id: string;
    penaltyAccount: string;
    rewardAccount: string;
    rewardAmount: BN;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
  };
}

export interface AgreementLiquidatedBy {
  name: "AgreementLiquidatedBy";
  args: {
    liquidatorAccount: string;
    agreementClass: string;
    id: string;
    penaltyAccount: string;
    bondAccount: string;
    rewardAmount: BN;
    bailoutAmount: BN;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: BN;
    6: BN;
  };
}

export interface AgreementLiquidatedV2 {
  name: "AgreementLiquidatedV2";
  args: {
    agreementClass: string;
    id: string;
    liquidatorAccount: string;
    targetAccount: string;
    rewardAmountReceiver: string;
    rewardAmount: BN;
    targetAccountBalanceDelta: BN;
    liquidationTypeData: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: BN;
    6: BN;
    7: string;
  };
}

export interface AgreementStateUpdated {
  name: "AgreementStateUpdated";
  args: {
    agreementClass: string;
    account: string;
    slotId: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface AgreementTerminated {
  name: "AgreementTerminated";
  args: {
    agreementClass: string;
    id: string;
    0: string;
    1: string;
  };
}

export interface AgreementUpdated {
  name: "AgreementUpdated";
  args: {
    agreementClass: string;
    id: string;
    data: string[];
    0: string;
    1: string;
    2: string[];
  };
}

export interface Bailout {
  name: "Bailout";
  args: {
    bailoutAccount: string;
    bailoutAmount: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | AgreementCreated
  | AgreementLiquidated
  | AgreementLiquidatedBy
  | AgreementLiquidatedV2
  | AgreementStateUpdated
  | AgreementTerminated
  | AgreementUpdated
  | Bailout;

export interface ISuperfluidTokenInstance extends Truffle.ContractInstance {
  /**
   * Get superfluid host contract address
   */
  getHost(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Calculate the real balance of a user, taking in consideration all agreements of the account
   * @param account for the query
   * @param timestamp Time of balance
   */
  realtimeBalanceOf(
    account: string,
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  /**
   * realtimeBalanceOf with timestamp equals to block timestamp
   * Calculate the realtime balance given the current host.getNow() value
   * @param account for the query
   */
  realtimeBalanceOfNow(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  /**
   * A critical account is when availableBalance < 0
   * Check if account is critical
   * @param account The account to check
   * @param timestamp The time we'd like to check if the account is critical (should use future)
   */
  isAccountCritical(
    account: string,
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * A critical account is when availableBalance < 0
   * Check if account is critical now (current host.getNow())
   * @param account The account to check
   */
  isAccountCriticalNow(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
   * Check if account is solvent
   * @param account The account to check
   * @param timestamp The time we'd like to check if the account is solvent (should use future)
   */
  isAccountSolvent(
    account: string,
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
   * Check if account is solvent now
   * @param account The account to check
   */
  isAccountSolventNow(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * An active agreement is one that has state for the account
   * Get a list of agreements that is active for the account
   * @param account Account to query
   */
  getAccountActiveAgreements(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Create a new agreement
   * @param data Agreement data
   * @param id Agreement ID
   */
  createAgreement: {
    (
      id: string,
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: string,
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: string,
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: string,
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get data of the agreement
   * @param agreementClass Contract address of the agreement
   * @param id Agreement ID
   */
  getAgreementData(
    agreementClass: string,
    id: string,
    dataLength: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Create a new agreement
   * @param data Agreement data
   * @param id Agreement ID
   */
  updateAgreementData: {
    (
      id: string,
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: string,
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: string,
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: string,
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Close the agreement
   * @param id Agreement ID
   */
  terminateAgreement: {
    (
      id: string,
      dataLength: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: string,
      dataLength: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: string,
      dataLength: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: string,
      dataLength: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update agreement state slot
   * @param account Account to be updated
   */
  updateAgreementStateSlot: {
    (
      account: string,
      slotId: number | BN | string,
      slotData: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      slotId: number | BN | string,
      slotData: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      slotId: number | BN | string,
      slotData: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      slotId: number | BN | string,
      slotData: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get data of the slot of the state of an agreement
   * @param account Account to query
   * @param agreementClass Contract address of the agreement
   * @param dataLength length of the state data
   * @param slotId slot id of the state
   */
  getAgreementStateSlot(
    agreementClass: string,
    account: string,
    slotId: number | BN | string,
    dataLength: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * The agreement needs to make sure that the balance delta is balanced afterwards
   * Settle balance from an account by the agreement
   * @param account Account to query.
   * @param delta Amount of balance delta to be settled
   */
  settleBalance: {
    (
      account: string,
      delta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      delta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      delta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      delta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Make liquidation payouts (v2)
   * @param id Agreement ID
   * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
   * @param liquidatorAccount Address of the executor of the liquidation
   * @param rewardAmount The amount the rewarded account will receive
   * @param targetAccount Account to be liquidated
   * @param targetAccountBalanceDelta The delta amount the target account balance should change by
   * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
   */
  makeLiquidationPayoutsV2: {
    (
      id: string,
      liquidationTypeData: string,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: number | BN | string,
      targetAccountBalanceDelta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: string,
      liquidationTypeData: string,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: number | BN | string,
      targetAccountBalanceDelta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: string,
      liquidationTypeData: string,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: number | BN | string,
      targetAccountBalanceDelta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: string,
      liquidationTypeData: string,
      liquidatorAccount: string,
      useDefaultRewardAccount: boolean,
      targetAccount: string,
      rewardAmount: number | BN | string,
      targetAccountBalanceDelta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Get superfluid host contract address
     */
    getHost(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: string,
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: string,
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: string,
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement: {
      (
        id: string,
        data: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: string,
        data: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: string,
        data: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: string,
        data: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: string,
      id: string,
      dataLength: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData: {
      (
        id: string,
        data: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: string,
        data: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: string,
        data: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: string,
        data: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement: {
      (
        id: string,
        dataLength: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: string,
        dataLength: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: string,
        dataLength: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: string,
        dataLength: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot: {
      (
        account: string,
        slotId: number | BN | string,
        slotData: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        slotId: number | BN | string,
        slotData: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        slotId: number | BN | string,
        slotData: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        slotId: number | BN | string,
        slotData: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: number | BN | string,
      dataLength: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance: {
      (
        account: string,
        delta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        delta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        delta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        delta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2: {
      (
        id: string,
        liquidationTypeData: string,
        liquidatorAccount: string,
        useDefaultRewardAccount: boolean,
        targetAccount: string,
        rewardAmount: number | BN | string,
        targetAccountBalanceDelta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: string,
        liquidationTypeData: string,
        liquidatorAccount: string,
        useDefaultRewardAccount: boolean,
        targetAccount: string,
        rewardAmount: number | BN | string,
        targetAccountBalanceDelta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: string,
        liquidationTypeData: string,
        liquidatorAccount: string,
        useDefaultRewardAccount: boolean,
        targetAccount: string,
        rewardAmount: number | BN | string,
        targetAccountBalanceDelta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: string,
        liquidationTypeData: string,
        liquidatorAccount: string,
        useDefaultRewardAccount: boolean,
        targetAccount: string,
        rewardAmount: number | BN | string,
        targetAccountBalanceDelta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
