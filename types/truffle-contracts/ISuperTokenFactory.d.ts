/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISuperTokenFactoryContract
  extends Truffle.Contract<ISuperTokenFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISuperTokenFactoryInstance>;
}

export interface CustomSuperTokenCreated {
  name: "CustomSuperTokenCreated";
  args: {
    token: string;
    0: string;
  };
}

export interface SuperTokenCreated {
  name: "SuperTokenCreated";
  args: {
    token: string;
    0: string;
  };
}

export interface SuperTokenLogicCreated {
  name: "SuperTokenLogicCreated";
  args: {
    tokenLogic: string;
    0: string;
  };
}

type AllEvents =
  | CustomSuperTokenCreated
  | SuperTokenCreated
  | SuperTokenLogicCreated;

export interface ISuperTokenFactoryInstance extends Truffle.ContractInstance {
  /**
   * Get superfluid host contract address
   */
  getHost(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Initialize the contract
   */
  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Get the current super token logic used by the factory
   */
  getSuperTokenLogic(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))
   * Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists
   * @param _underlyingToken Underlying ERC20 token
   */
  createCanonicalERC20Wrapper: {
    (_underlyingToken: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _underlyingToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _underlyingToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _underlyingToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens
   * Computes/Retrieves wrapper super token address given the underlying token address
   * @param _underlyingToken Underlying ERC20 token address
   */
  computeCanonicalERC20WrapperAddress(
    _underlyingToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: boolean }>;

  /**
   * We return the address if it exists and the zero address otherwise
   * Gets the canonical ERC20 wrapper super token address given the underlying token address
   * @param _underlyingTokenAddress Underlying ERC20 token address
   */
  getCanonicalERC20Wrapper(
    _underlyingTokenAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Creates a new custom super token
   * @param customSuperTokenProxy address of the custom supertoken proxy
   */
  initializeCustomSuperToken: {
    (
      customSuperTokenProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      customSuperTokenProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      customSuperTokenProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      customSuperTokenProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Get superfluid host contract address
     */
    getHost(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Initialize the contract
     */
    initialize: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Get the current super token logic used by the factory
     */
    getSuperTokenLogic(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))
     * Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists
     * @param _underlyingToken Underlying ERC20 token
     */
    createCanonicalERC20Wrapper: {
      (
        _underlyingToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _underlyingToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _underlyingToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _underlyingToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens
     * Computes/Retrieves wrapper super token address given the underlying token address
     * @param _underlyingToken Underlying ERC20 token address
     */
    computeCanonicalERC20WrapperAddress(
      _underlyingToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: boolean }>;

    /**
     * We return the address if it exists and the zero address otherwise
     * Gets the canonical ERC20 wrapper super token address given the underlying token address
     * @param _underlyingTokenAddress Underlying ERC20 token address
     */
    getCanonicalERC20Wrapper(
      _underlyingTokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Creates a new custom super token
     * @param customSuperTokenProxy address of the custom supertoken proxy
     */
    initializeCustomSuperToken: {
      (
        customSuperTokenProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        customSuperTokenProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        customSuperTokenProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        customSuperTokenProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Create new super token wrapper for the underlying ERC20 token with extra token info
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,string,string)": {
      (
        underlyingToken: string,
        upgradability: number | BN | string,
        name: string,
        symbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        underlyingToken: string,
        upgradability: number | BN | string,
        name: string,
        symbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        underlyingToken: string,
        upgradability: number | BN | string,
        name: string,
        symbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        underlyingToken: string,
        upgradability: number | BN | string,
        name: string,
        symbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Create new super token wrapper for the underlying ERC20 token
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingDecimals Underlying token decimals
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,uint8,string,string)": {
      (
        underlyingToken: string,
        underlyingDecimals: number | BN | string,
        upgradability: number | BN | string,
        name: string,
        symbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        underlyingToken: string,
        underlyingDecimals: number | BN | string,
        upgradability: number | BN | string,
        name: string,
        symbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        underlyingToken: string,
        underlyingDecimals: number | BN | string,
        upgradability: number | BN | string,
        name: string,
        symbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        underlyingToken: string,
        underlyingDecimals: number | BN | string,
        upgradability: number | BN | string,
        name: string,
        symbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
