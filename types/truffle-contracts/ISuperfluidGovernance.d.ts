/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISuperfluidGovernanceContract
  extends Truffle.Contract<ISuperfluidGovernanceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ISuperfluidGovernanceInstance>;
}

type AllEvents = never;

export interface ISuperfluidGovernanceInstance
  extends Truffle.ContractInstance {
  /**
   * Replace the current governance with a new governance
   */
  replaceGovernance: {
    (
      host: string,
      newGov: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      host: string,
      newGov: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string,
      newGov: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string,
      newGov: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Register a new agreement class
   */
  registerAgreementClass: {
    (
      host: string,
      agreementClass: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      host: string,
      agreementClass: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string,
      agreementClass: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string,
      agreementClass: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update logics of the contracts
   */
  updateContracts: {
    (
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update supertoken logic contract to the latest that is managed by the super token factory
   */
  batchUpdateSuperTokenLogic: {
    (
      host: string,
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      host: string,
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string,
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string,
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Clear configuration
   */
  clearConfig: {
    (
      host: string,
      superToken: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      host: string,
      superToken: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string,
      superToken: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string,
      superToken: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get configuration as address value
   */
  getConfigAsAddress(
    host: string,
    superToken: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get configuration as uint256 value
   */
  getConfigAsUint256(
    host: string,
    superToken: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    /**
     * Replace the current governance with a new governance
     */
    replaceGovernance: {
      (
        host: string,
        newGov: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        host: string,
        newGov: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        host: string,
        newGov: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        host: string,
        newGov: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Register a new agreement class
     */
    registerAgreementClass: {
      (
        host: string,
        agreementClass: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        host: string,
        agreementClass: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        host: string,
        agreementClass: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        host: string,
        agreementClass: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update logics of the contracts
     */
    updateContracts: {
      (
        host: string,
        hostNewLogic: string,
        agreementClassNewLogics: string[],
        superTokenFactoryNewLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        host: string,
        hostNewLogic: string,
        agreementClassNewLogics: string[],
        superTokenFactoryNewLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        host: string,
        hostNewLogic: string,
        agreementClassNewLogics: string[],
        superTokenFactoryNewLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        host: string,
        hostNewLogic: string,
        agreementClassNewLogics: string[],
        superTokenFactoryNewLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update supertoken logic contract to the latest that is managed by the super token factory
     */
    batchUpdateSuperTokenLogic: {
      (
        host: string,
        tokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        host: string,
        tokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        host: string,
        tokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        host: string,
        tokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Clear configuration
     */
    clearConfig: {
      (
        host: string,
        superToken: string,
        key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        host: string,
        superToken: string,
        key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        host: string,
        superToken: string,
        key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        host: string,
        superToken: string,
        key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get configuration as address value
     */
    getConfigAsAddress(
      host: string,
      superToken: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get configuration as uint256 value
     */
    getConfigAsUint256(
      host: string,
      superToken: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Set configuration as address value
     */
    "setConfig(address,address,bytes32,address)": {
      (
        host: string,
        superToken: string,
        key: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        host: string,
        superToken: string,
        key: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        host: string,
        superToken: string,
        key: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        host: string,
        superToken: string,
        key: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set configuration as uint256 value
     */
    "setConfig(address,address,bytes32,uint256)": {
      (
        host: string,
        superToken: string,
        key: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        host: string,
        superToken: string,
        key: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        host: string,
        superToken: string,
        key: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        host: string,
        superToken: string,
        key: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
