/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ISuperfluidTokenInterface extends utils.Interface {
  functions: {
    "getHost()": FunctionFragment;
    "realtimeBalanceOf(address,uint256)": FunctionFragment;
    "realtimeBalanceOfNow(address)": FunctionFragment;
    "isAccountCritical(address,uint256)": FunctionFragment;
    "isAccountCriticalNow(address)": FunctionFragment;
    "isAccountSolvent(address,uint256)": FunctionFragment;
    "isAccountSolventNow(address)": FunctionFragment;
    "getAccountActiveAgreements(address)": FunctionFragment;
    "createAgreement(bytes32,bytes32[])": FunctionFragment;
    "getAgreementData(address,bytes32,uint256)": FunctionFragment;
    "updateAgreementData(bytes32,bytes32[])": FunctionFragment;
    "terminateAgreement(bytes32,uint256)": FunctionFragment;
    "updateAgreementStateSlot(address,uint256,bytes32[])": FunctionFragment;
    "getAgreementStateSlot(address,address,uint256,uint256)": FunctionFragment;
    "settleBalance(address,int256)": FunctionFragment;
    "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getHost"
      | "realtimeBalanceOf"
      | "realtimeBalanceOfNow"
      | "isAccountCritical"
      | "isAccountCriticalNow"
      | "isAccountSolvent"
      | "isAccountSolventNow"
      | "getAccountActiveAgreements"
      | "createAgreement"
      | "getAgreementData"
      | "updateAgreementData"
      | "terminateAgreement"
      | "updateAgreementStateSlot"
      | "getAgreementStateSlot"
      | "settleBalance"
      | "makeLiquidationPayoutsV2"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getHost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOfNow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountCritical",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountCriticalNow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolvent",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolventNow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountActiveAgreements",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementData",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateAgreement",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementStateSlot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementStateSlot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeLiquidationPayoutsV2",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getHost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOfNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCritical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCriticalNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolventNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountActiveAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeLiquidationPayoutsV2",
    data: BytesLike
  ): Result;

  events: {
    "AgreementCreated(address,bytes32,bytes32[])": EventFragment;
    "AgreementLiquidated(address,bytes32,address,address,uint256)": EventFragment;
    "AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": EventFragment;
    "AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": EventFragment;
    "AgreementStateUpdated(address,address,uint256)": EventFragment;
    "AgreementTerminated(address,bytes32)": EventFragment;
    "AgreementUpdated(address,bytes32,bytes32[])": EventFragment;
    "Bailout(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidatedBy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidatedV2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementStateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementTerminated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bailout"): EventFragment;
}

export interface AgreementCreatedEventObject {
  agreementClass: string;
  id: string;
  data: string[];
}
export type AgreementCreatedEvent = TypedEvent<
  [string, string, string[]],
  AgreementCreatedEventObject
>;

export type AgreementCreatedEventFilter =
  TypedEventFilter<AgreementCreatedEvent>;

export interface AgreementLiquidatedEventObject {
  agreementClass: string;
  id: string;
  penaltyAccount: string;
  rewardAccount: string;
  rewardAmount: BigNumber;
}
export type AgreementLiquidatedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  AgreementLiquidatedEventObject
>;

export type AgreementLiquidatedEventFilter =
  TypedEventFilter<AgreementLiquidatedEvent>;

export interface AgreementLiquidatedByEventObject {
  liquidatorAccount: string;
  agreementClass: string;
  id: string;
  penaltyAccount: string;
  bondAccount: string;
  rewardAmount: BigNumber;
  bailoutAmount: BigNumber;
}
export type AgreementLiquidatedByEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber],
  AgreementLiquidatedByEventObject
>;

export type AgreementLiquidatedByEventFilter =
  TypedEventFilter<AgreementLiquidatedByEvent>;

export interface AgreementLiquidatedV2EventObject {
  agreementClass: string;
  id: string;
  liquidatorAccount: string;
  targetAccount: string;
  rewardAmountReceiver: string;
  rewardAmount: BigNumber;
  targetAccountBalanceDelta: BigNumber;
  liquidationTypeData: string;
}
export type AgreementLiquidatedV2Event = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, string],
  AgreementLiquidatedV2EventObject
>;

export type AgreementLiquidatedV2EventFilter =
  TypedEventFilter<AgreementLiquidatedV2Event>;

export interface AgreementStateUpdatedEventObject {
  agreementClass: string;
  account: string;
  slotId: BigNumber;
}
export type AgreementStateUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  AgreementStateUpdatedEventObject
>;

export type AgreementStateUpdatedEventFilter =
  TypedEventFilter<AgreementStateUpdatedEvent>;

export interface AgreementTerminatedEventObject {
  agreementClass: string;
  id: string;
}
export type AgreementTerminatedEvent = TypedEvent<
  [string, string],
  AgreementTerminatedEventObject
>;

export type AgreementTerminatedEventFilter =
  TypedEventFilter<AgreementTerminatedEvent>;

export interface AgreementUpdatedEventObject {
  agreementClass: string;
  id: string;
  data: string[];
}
export type AgreementUpdatedEvent = TypedEvent<
  [string, string, string[]],
  AgreementUpdatedEventObject
>;

export type AgreementUpdatedEventFilter =
  TypedEventFilter<AgreementUpdatedEvent>;

export interface BailoutEventObject {
  bailoutAccount: string;
  bailoutAmount: BigNumber;
}
export type BailoutEvent = TypedEvent<[string, BigNumber], BailoutEventObject>;

export type BailoutEventFilter = TypedEventFilter<BailoutEvent>;

export interface ISuperfluidToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISuperfluidTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<[string] & { host: string }>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCritical: boolean }>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCritical: boolean }>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSolvent: boolean }>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSolvent: boolean }>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { activeAgreements: string[] }>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { data: string[] }>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement(
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot(
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      slotData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { slotData: string[] }>;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance(
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2(
      id: PromiseOrValue<BytesLike>,
      liquidationTypeData: PromiseOrValue<BytesLike>,
      liquidatorAccount: PromiseOrValue<string>,
      useDefaultRewardAccount: PromiseOrValue<boolean>,
      targetAccount: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Get superfluid host contract address
   */
  getHost(overrides?: CallOverrides): Promise<string>;

  /**
   * Calculate the real balance of a user, taking in consideration all agreements of the account
   * @param account for the query
   * @param timestamp Time of balance
   */
  realtimeBalanceOf(
    account: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  /**
   * realtimeBalanceOf with timestamp equals to block timestamp
   * Calculate the realtime balance given the current host.getNow() value
   * @param account for the query
   */
  realtimeBalanceOfNow(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      timestamp: BigNumber;
    }
  >;

  /**
   * A critical account is when availableBalance < 0
   * Check if account is critical
   * @param account The account to check
   * @param timestamp The time we'd like to check if the account is critical (should use future)
   */
  isAccountCritical(
    account: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * A critical account is when availableBalance < 0
   * Check if account is critical now (current host.getNow())
   * @param account The account to check
   */
  isAccountCriticalNow(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
   * Check if account is solvent
   * @param account The account to check
   * @param timestamp The time we'd like to check if the account is solvent (should use future)
   */
  isAccountSolvent(
    account: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
   * Check if account is solvent now
   * @param account The account to check
   */
  isAccountSolventNow(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * An active agreement is one that has state for the account
   * Get a list of agreements that is active for the account
   * @param account Account to query
   */
  getAccountActiveAgreements(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Create a new agreement
   * @param data Agreement data
   * @param id Agreement ID
   */
  createAgreement(
    id: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get data of the agreement
   * @param agreementClass Contract address of the agreement
   * @param id Agreement ID
   */
  getAgreementData(
    agreementClass: PromiseOrValue<string>,
    id: PromiseOrValue<BytesLike>,
    dataLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Create a new agreement
   * @param data Agreement data
   * @param id Agreement ID
   */
  updateAgreementData(
    id: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Close the agreement
   * @param id Agreement ID
   */
  terminateAgreement(
    id: PromiseOrValue<BytesLike>,
    dataLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update agreement state slot
   * @param account Account to be updated
   */
  updateAgreementStateSlot(
    account: PromiseOrValue<string>,
    slotId: PromiseOrValue<BigNumberish>,
    slotData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get data of the slot of the state of an agreement
   * @param account Account to query
   * @param agreementClass Contract address of the agreement
   * @param dataLength length of the state data
   * @param slotId slot id of the state
   */
  getAgreementStateSlot(
    agreementClass: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    slotId: PromiseOrValue<BigNumberish>,
    dataLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * The agreement needs to make sure that the balance delta is balanced afterwards
   * Settle balance from an account by the agreement
   * @param account Account to query.
   * @param delta Amount of balance delta to be settled
   */
  settleBalance(
    account: PromiseOrValue<string>,
    delta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Make liquidation payouts (v2)
   * @param id Agreement ID
   * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
   * @param liquidatorAccount Address of the executor of the liquidation
   * @param rewardAmount The amount the rewarded account will receive
   * @param targetAccount Account to be liquidated
   * @param targetAccountBalanceDelta The delta amount the target account balance should change by
   * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
   */
  makeLiquidationPayoutsV2(
    id: PromiseOrValue<BytesLike>,
    liquidationTypeData: PromiseOrValue<BytesLike>,
    liquidatorAccount: PromiseOrValue<string>,
    useDefaultRewardAccount: PromiseOrValue<boolean>,
    targetAccount: PromiseOrValue<string>,
    rewardAmount: PromiseOrValue<BigNumberish>,
    targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<string>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement(
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot(
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      slotData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance(
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2(
      id: PromiseOrValue<BytesLike>,
      liquidationTypeData: PromiseOrValue<BytesLike>,
      liquidatorAccount: PromiseOrValue<string>,
      useDefaultRewardAccount: PromiseOrValue<boolean>,
      targetAccount: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AgreementCreated(address,bytes32,bytes32[])"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      data?: null
    ): AgreementCreatedEventFilter;
    AgreementCreated(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      data?: null
    ): AgreementCreatedEventFilter;

    "AgreementLiquidated(address,bytes32,address,address,uint256)"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      penaltyAccount?: PromiseOrValue<string> | null,
      rewardAccount?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): AgreementLiquidatedEventFilter;
    AgreementLiquidated(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      penaltyAccount?: PromiseOrValue<string> | null,
      rewardAccount?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): AgreementLiquidatedEventFilter;

    "AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)"(
      liquidatorAccount?: null,
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      penaltyAccount?: PromiseOrValue<string> | null,
      bondAccount?: PromiseOrValue<string> | null,
      rewardAmount?: null,
      bailoutAmount?: null
    ): AgreementLiquidatedByEventFilter;
    AgreementLiquidatedBy(
      liquidatorAccount?: null,
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      penaltyAccount?: PromiseOrValue<string> | null,
      bondAccount?: PromiseOrValue<string> | null,
      rewardAmount?: null,
      bailoutAmount?: null
    ): AgreementLiquidatedByEventFilter;

    "AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      liquidatorAccount?: PromiseOrValue<string> | null,
      targetAccount?: PromiseOrValue<string> | null,
      rewardAmountReceiver?: null,
      rewardAmount?: null,
      targetAccountBalanceDelta?: null,
      liquidationTypeData?: null
    ): AgreementLiquidatedV2EventFilter;
    AgreementLiquidatedV2(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      liquidatorAccount?: PromiseOrValue<string> | null,
      targetAccount?: PromiseOrValue<string> | null,
      rewardAmountReceiver?: null,
      rewardAmount?: null,
      targetAccountBalanceDelta?: null,
      liquidationTypeData?: null
    ): AgreementLiquidatedV2EventFilter;

    "AgreementStateUpdated(address,address,uint256)"(
      agreementClass?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      slotId?: null
    ): AgreementStateUpdatedEventFilter;
    AgreementStateUpdated(
      agreementClass?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      slotId?: null
    ): AgreementStateUpdatedEventFilter;

    "AgreementTerminated(address,bytes32)"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null
    ): AgreementTerminatedEventFilter;
    AgreementTerminated(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null
    ): AgreementTerminatedEventFilter;

    "AgreementUpdated(address,bytes32,bytes32[])"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      data?: null
    ): AgreementUpdatedEventFilter;
    AgreementUpdated(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      data?: null
    ): AgreementUpdatedEventFilter;

    "Bailout(address,uint256)"(
      bailoutAccount?: PromiseOrValue<string> | null,
      bailoutAmount?: null
    ): BailoutEventFilter;
    Bailout(
      bailoutAccount?: PromiseOrValue<string> | null,
      bailoutAmount?: null
    ): BailoutEventFilter;
  };

  estimateGas: {
    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement(
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot(
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      slotData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance(
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2(
      id: PromiseOrValue<BytesLike>,
      liquidationTypeData: PromiseOrValue<BytesLike>,
      liquidatorAccount: PromiseOrValue<string>,
      useDefaultRewardAccount: PromiseOrValue<boolean>,
      targetAccount: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement(
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot(
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      slotData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance(
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2(
      id: PromiseOrValue<BytesLike>,
      liquidationTypeData: PromiseOrValue<BytesLike>,
      liquidatorAccount: PromiseOrValue<string>,
      useDefaultRewardAccount: PromiseOrValue<boolean>,
      targetAccount: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
