/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ISuperTokenFactoryInterface extends utils.Interface {
  functions: {
    "getHost()": FunctionFragment;
    "initialize()": FunctionFragment;
    "getSuperTokenLogic()": FunctionFragment;
    "createERC20Wrapper(address,uint8,string,string)": FunctionFragment;
    "createERC20Wrapper(address,uint8,uint8,string,string)": FunctionFragment;
    "createCanonicalERC20Wrapper(address)": FunctionFragment;
    "computeCanonicalERC20WrapperAddress(address)": FunctionFragment;
    "getCanonicalERC20Wrapper(address)": FunctionFragment;
    "initializeCustomSuperToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getHost"
      | "initialize"
      | "getSuperTokenLogic"
      | "createERC20Wrapper(address,uint8,string,string)"
      | "createERC20Wrapper(address,uint8,uint8,string,string)"
      | "createCanonicalERC20Wrapper"
      | "computeCanonicalERC20WrapperAddress"
      | "getCanonicalERC20Wrapper"
      | "initializeCustomSuperToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getHost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuperTokenLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20Wrapper(address,uint8,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC20Wrapper(address,uint8,uint8,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCanonicalERC20Wrapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCanonicalERC20WrapperAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCanonicalERC20Wrapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCustomSuperToken",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getHost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSuperTokenLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20Wrapper(address,uint8,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC20Wrapper(address,uint8,uint8,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCanonicalERC20Wrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCanonicalERC20WrapperAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCanonicalERC20Wrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCustomSuperToken",
    data: BytesLike
  ): Result;

  events: {
    "CustomSuperTokenCreated(address)": EventFragment;
    "SuperTokenCreated(address)": EventFragment;
    "SuperTokenLogicCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CustomSuperTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuperTokenLogicCreated"): EventFragment;
}

export interface CustomSuperTokenCreatedEventObject {
  token: string;
}
export type CustomSuperTokenCreatedEvent = TypedEvent<
  [string],
  CustomSuperTokenCreatedEventObject
>;

export type CustomSuperTokenCreatedEventFilter =
  TypedEventFilter<CustomSuperTokenCreatedEvent>;

export interface SuperTokenCreatedEventObject {
  token: string;
}
export type SuperTokenCreatedEvent = TypedEvent<
  [string],
  SuperTokenCreatedEventObject
>;

export type SuperTokenCreatedEventFilter =
  TypedEventFilter<SuperTokenCreatedEvent>;

export interface SuperTokenLogicCreatedEventObject {
  tokenLogic: string;
}
export type SuperTokenLogicCreatedEvent = TypedEvent<
  [string],
  SuperTokenLogicCreatedEventObject
>;

export type SuperTokenLogicCreatedEventFilter =
  TypedEventFilter<SuperTokenLogicCreatedEvent>;

export interface ISuperTokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISuperTokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<[string] & { host: string }>;

    /**
     * Initialize the contract
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the current super token logic used by the factory
     */
    getSuperTokenLogic(
      overrides?: CallOverrides
    ): Promise<[string] & { superToken: string }>;

    /**
     * Create new super token wrapper for the underlying ERC20 token with extra token info
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,string,string)"(
      underlyingToken: PromiseOrValue<string>,
      upgradability: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Create new super token wrapper for the underlying ERC20 token
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingDecimals Underlying token decimals
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,uint8,string,string)"(
      underlyingToken: PromiseOrValue<string>,
      underlyingDecimals: PromiseOrValue<BigNumberish>,
      upgradability: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))
     * Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists
     * @param _underlyingToken Underlying ERC20 token
     */
    createCanonicalERC20Wrapper(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens
     * Computes/Retrieves wrapper super token address given the underlying token address
     * @param _underlyingToken Underlying ERC20 token address
     */
    computeCanonicalERC20WrapperAddress(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { superTokenAddress: string; isDeployed: boolean }
    >;

    /**
     * We return the address if it exists and the zero address otherwise
     * Gets the canonical ERC20 wrapper super token address given the underlying token address
     * @param _underlyingTokenAddress Underlying ERC20 token address
     */
    getCanonicalERC20Wrapper(
      _underlyingTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { superTokenAddress: string }>;

    /**
     * Creates a new custom super token
     * @param customSuperTokenProxy address of the custom supertoken proxy
     */
    initializeCustomSuperToken(
      customSuperTokenProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Get superfluid host contract address
   */
  getHost(overrides?: CallOverrides): Promise<string>;

  /**
   * Initialize the contract
   */
  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the current super token logic used by the factory
   */
  getSuperTokenLogic(overrides?: CallOverrides): Promise<string>;

  /**
   * Create new super token wrapper for the underlying ERC20 token with extra token info
   * @param name Super token name
   * @param symbol Super token symbol
   * @param underlyingToken Underlying ERC20 token
   * @param upgradability Upgradability mode
   */
  "createERC20Wrapper(address,uint8,string,string)"(
    underlyingToken: PromiseOrValue<string>,
    upgradability: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Create new super token wrapper for the underlying ERC20 token
   * @param name Super token name
   * @param symbol Super token symbol
   * @param underlyingDecimals Underlying token decimals
   * @param underlyingToken Underlying ERC20 token
   * @param upgradability Upgradability mode
   */
  "createERC20Wrapper(address,uint8,uint8,string,string)"(
    underlyingToken: PromiseOrValue<string>,
    underlyingDecimals: PromiseOrValue<BigNumberish>,
    upgradability: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))
   * Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists
   * @param _underlyingToken Underlying ERC20 token
   */
  createCanonicalERC20Wrapper(
    _underlyingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens
   * Computes/Retrieves wrapper super token address given the underlying token address
   * @param _underlyingToken Underlying ERC20 token address
   */
  computeCanonicalERC20WrapperAddress(
    _underlyingToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { superTokenAddress: string; isDeployed: boolean }
  >;

  /**
   * We return the address if it exists and the zero address otherwise
   * Gets the canonical ERC20 wrapper super token address given the underlying token address
   * @param _underlyingTokenAddress Underlying ERC20 token address
   */
  getCanonicalERC20Wrapper(
    _underlyingTokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Creates a new custom super token
   * @param customSuperTokenProxy address of the custom supertoken proxy
   */
  initializeCustomSuperToken(
    customSuperTokenProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<string>;

    /**
     * Initialize the contract
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    /**
     * Get the current super token logic used by the factory
     */
    getSuperTokenLogic(overrides?: CallOverrides): Promise<string>;

    /**
     * Create new super token wrapper for the underlying ERC20 token with extra token info
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,string,string)"(
      underlyingToken: PromiseOrValue<string>,
      upgradability: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Create new super token wrapper for the underlying ERC20 token
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingDecimals Underlying token decimals
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,uint8,string,string)"(
      underlyingToken: PromiseOrValue<string>,
      underlyingDecimals: PromiseOrValue<BigNumberish>,
      upgradability: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))
     * Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists
     * @param _underlyingToken Underlying ERC20 token
     */
    createCanonicalERC20Wrapper(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens
     * Computes/Retrieves wrapper super token address given the underlying token address
     * @param _underlyingToken Underlying ERC20 token address
     */
    computeCanonicalERC20WrapperAddress(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { superTokenAddress: string; isDeployed: boolean }
    >;

    /**
     * We return the address if it exists and the zero address otherwise
     * Gets the canonical ERC20 wrapper super token address given the underlying token address
     * @param _underlyingTokenAddress Underlying ERC20 token address
     */
    getCanonicalERC20Wrapper(
      _underlyingTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Creates a new custom super token
     * @param customSuperTokenProxy address of the custom supertoken proxy
     */
    initializeCustomSuperToken(
      customSuperTokenProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CustomSuperTokenCreated(address)"(
      token?: PromiseOrValue<string> | null
    ): CustomSuperTokenCreatedEventFilter;
    CustomSuperTokenCreated(
      token?: PromiseOrValue<string> | null
    ): CustomSuperTokenCreatedEventFilter;

    "SuperTokenCreated(address)"(
      token?: PromiseOrValue<string> | null
    ): SuperTokenCreatedEventFilter;
    SuperTokenCreated(
      token?: PromiseOrValue<string> | null
    ): SuperTokenCreatedEventFilter;

    "SuperTokenLogicCreated(address)"(
      tokenLogic?: PromiseOrValue<string> | null
    ): SuperTokenLogicCreatedEventFilter;
    SuperTokenLogicCreated(
      tokenLogic?: PromiseOrValue<string> | null
    ): SuperTokenLogicCreatedEventFilter;
  };

  estimateGas: {
    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Initialize the contract
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the current super token logic used by the factory
     */
    getSuperTokenLogic(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Create new super token wrapper for the underlying ERC20 token with extra token info
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,string,string)"(
      underlyingToken: PromiseOrValue<string>,
      upgradability: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Create new super token wrapper for the underlying ERC20 token
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingDecimals Underlying token decimals
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,uint8,string,string)"(
      underlyingToken: PromiseOrValue<string>,
      underlyingDecimals: PromiseOrValue<BigNumberish>,
      upgradability: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))
     * Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists
     * @param _underlyingToken Underlying ERC20 token
     */
    createCanonicalERC20Wrapper(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens
     * Computes/Retrieves wrapper super token address given the underlying token address
     * @param _underlyingToken Underlying ERC20 token address
     */
    computeCanonicalERC20WrapperAddress(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * We return the address if it exists and the zero address otherwise
     * Gets the canonical ERC20 wrapper super token address given the underlying token address
     * @param _underlyingTokenAddress Underlying ERC20 token address
     */
    getCanonicalERC20Wrapper(
      _underlyingTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Creates a new custom super token
     * @param customSuperTokenProxy address of the custom supertoken proxy
     */
    initializeCustomSuperToken(
      customSuperTokenProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Initialize the contract
     */
    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the current super token logic used by the factory
     */
    getSuperTokenLogic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Create new super token wrapper for the underlying ERC20 token with extra token info
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,string,string)"(
      underlyingToken: PromiseOrValue<string>,
      upgradability: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Create new super token wrapper for the underlying ERC20 token
     * @param name Super token name
     * @param symbol Super token symbol
     * @param underlyingDecimals Underlying token decimals
     * @param underlyingToken Underlying ERC20 token
     * @param upgradability Upgradability mode
     */
    "createERC20Wrapper(address,uint8,uint8,string,string)"(
      underlyingToken: PromiseOrValue<string>,
      underlyingDecimals: PromiseOrValue<BigNumberish>,
      upgradability: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))
     * Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists
     * @param _underlyingToken Underlying ERC20 token
     */
    createCanonicalERC20Wrapper(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens
     * Computes/Retrieves wrapper super token address given the underlying token address
     * @param _underlyingToken Underlying ERC20 token address
     */
    computeCanonicalERC20WrapperAddress(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * We return the address if it exists and the zero address otherwise
     * Gets the canonical ERC20 wrapper super token address given the underlying token address
     * @param _underlyingTokenAddress Underlying ERC20 token address
     */
    getCanonicalERC20Wrapper(
      _underlyingTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Creates a new custom super token
     * @param customSuperTokenProxy address of the custom supertoken proxy
     */
    initializeCustomSuperToken(
      customSuperTokenProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
