/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ISuperTokenInterface extends utils.Interface {
  functions: {
    "createAgreement(bytes32,bytes32[])": FunctionFragment;
    "getAccountActiveAgreements(address)": FunctionFragment;
    "getAgreementData(address,bytes32,uint256)": FunctionFragment;
    "getAgreementStateSlot(address,address,uint256,uint256)": FunctionFragment;
    "getHost()": FunctionFragment;
    "isAccountCritical(address,uint256)": FunctionFragment;
    "isAccountCriticalNow(address)": FunctionFragment;
    "isAccountSolvent(address,uint256)": FunctionFragment;
    "isAccountSolventNow(address)": FunctionFragment;
    "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": FunctionFragment;
    "realtimeBalanceOf(address,uint256)": FunctionFragment;
    "realtimeBalanceOfNow(address)": FunctionFragment;
    "settleBalance(address,int256)": FunctionFragment;
    "terminateAgreement(bytes32,uint256)": FunctionFragment;
    "updateAgreementData(bytes32,bytes32[])": FunctionFragment;
    "updateAgreementStateSlot(address,uint256,bytes32[])": FunctionFragment;
    "initialize(address,uint8,string,string)": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "decimals()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "granularity()": FunctionFragment;
    "send(address,uint256,bytes)": FunctionFragment;
    "burn(uint256,bytes)": FunctionFragment;
    "isOperatorFor(address,address)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "defaultOperators()": FunctionFragment;
    "operatorSend(address,address,uint256,bytes,bytes)": FunctionFragment;
    "operatorBurn(address,uint256,bytes,bytes)": FunctionFragment;
    "selfMint(address,uint256,bytes)": FunctionFragment;
    "selfBurn(address,uint256,bytes)": FunctionFragment;
    "selfTransferFrom(address,address,address,uint256)": FunctionFragment;
    "selfApproveFor(address,address,uint256)": FunctionFragment;
    "transferAll(address)": FunctionFragment;
    "getUnderlyingToken()": FunctionFragment;
    "upgrade(uint256)": FunctionFragment;
    "upgradeTo(address,uint256,bytes)": FunctionFragment;
    "downgrade(uint256)": FunctionFragment;
    "downgradeTo(address,uint256)": FunctionFragment;
    "operationApprove(address,address,uint256)": FunctionFragment;
    "operationTransferFrom(address,address,address,uint256)": FunctionFragment;
    "operationSend(address,address,uint256,bytes)": FunctionFragment;
    "operationUpgrade(address,uint256)": FunctionFragment;
    "operationDowngrade(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createAgreement"
      | "getAccountActiveAgreements"
      | "getAgreementData"
      | "getAgreementStateSlot"
      | "getHost"
      | "isAccountCritical"
      | "isAccountCriticalNow"
      | "isAccountSolvent"
      | "isAccountSolventNow"
      | "makeLiquidationPayoutsV2"
      | "realtimeBalanceOf"
      | "realtimeBalanceOfNow"
      | "settleBalance"
      | "terminateAgreement"
      | "updateAgreementData"
      | "updateAgreementStateSlot"
      | "initialize"
      | "name"
      | "symbol"
      | "decimals"
      | "totalSupply"
      | "balanceOf"
      | "transfer"
      | "allowance"
      | "approve"
      | "transferFrom"
      | "increaseAllowance"
      | "decreaseAllowance"
      | "granularity"
      | "send"
      | "burn"
      | "isOperatorFor"
      | "authorizeOperator"
      | "revokeOperator"
      | "defaultOperators"
      | "operatorSend"
      | "operatorBurn"
      | "selfMint"
      | "selfBurn"
      | "selfTransferFrom"
      | "selfApproveFor"
      | "transferAll"
      | "getUnderlyingToken"
      | "upgrade"
      | "upgradeTo"
      | "downgrade"
      | "downgradeTo"
      | "operationApprove"
      | "operationTransferFrom"
      | "operationSend"
      | "operationUpgrade"
      | "operationDowngrade"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountActiveAgreements",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementStateSlot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getHost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAccountCritical",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountCriticalNow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolvent",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolventNow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeLiquidationPayoutsV2",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOfNow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateAgreement",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementData",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementStateSlot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorFor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorSend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorBurn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfBurn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "selfApproveFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "downgrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "downgradeTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "operationApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operationTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operationSend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operationUpgrade",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "operationDowngrade",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountActiveAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCritical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCriticalNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolventNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeLiquidationPayoutsV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOfNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selfMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selfBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfApproveFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "downgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "downgradeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationDowngrade",
    data: BytesLike
  ): Result;

  events: {
    "AgreementCreated(address,bytes32,bytes32[])": EventFragment;
    "AgreementLiquidated(address,bytes32,address,address,uint256)": EventFragment;
    "AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": EventFragment;
    "AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": EventFragment;
    "AgreementStateUpdated(address,address,uint256)": EventFragment;
    "AgreementTerminated(address,bytes32)": EventFragment;
    "AgreementUpdated(address,bytes32,bytes32[])": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "Bailout(address,uint256)": EventFragment;
    "Burned(address,address,uint256,bytes,bytes)": EventFragment;
    "Minted(address,address,uint256,bytes,bytes)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "Sent(address,address,address,uint256,bytes,bytes)": EventFragment;
    "TokenDowngraded(address,uint256)": EventFragment;
    "TokenUpgraded(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidatedBy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidatedV2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementStateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementTerminated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bailout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDowngraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AgreementCreatedEventObject {
  agreementClass: string;
  id: string;
  data: string[];
}
export type AgreementCreatedEvent = TypedEvent<
  [string, string, string[]],
  AgreementCreatedEventObject
>;

export type AgreementCreatedEventFilter =
  TypedEventFilter<AgreementCreatedEvent>;

export interface AgreementLiquidatedEventObject {
  agreementClass: string;
  id: string;
  penaltyAccount: string;
  rewardAccount: string;
  rewardAmount: BigNumber;
}
export type AgreementLiquidatedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  AgreementLiquidatedEventObject
>;

export type AgreementLiquidatedEventFilter =
  TypedEventFilter<AgreementLiquidatedEvent>;

export interface AgreementLiquidatedByEventObject {
  liquidatorAccount: string;
  agreementClass: string;
  id: string;
  penaltyAccount: string;
  bondAccount: string;
  rewardAmount: BigNumber;
  bailoutAmount: BigNumber;
}
export type AgreementLiquidatedByEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber],
  AgreementLiquidatedByEventObject
>;

export type AgreementLiquidatedByEventFilter =
  TypedEventFilter<AgreementLiquidatedByEvent>;

export interface AgreementLiquidatedV2EventObject {
  agreementClass: string;
  id: string;
  liquidatorAccount: string;
  targetAccount: string;
  rewardAmountReceiver: string;
  rewardAmount: BigNumber;
  targetAccountBalanceDelta: BigNumber;
  liquidationTypeData: string;
}
export type AgreementLiquidatedV2Event = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, string],
  AgreementLiquidatedV2EventObject
>;

export type AgreementLiquidatedV2EventFilter =
  TypedEventFilter<AgreementLiquidatedV2Event>;

export interface AgreementStateUpdatedEventObject {
  agreementClass: string;
  account: string;
  slotId: BigNumber;
}
export type AgreementStateUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  AgreementStateUpdatedEventObject
>;

export type AgreementStateUpdatedEventFilter =
  TypedEventFilter<AgreementStateUpdatedEvent>;

export interface AgreementTerminatedEventObject {
  agreementClass: string;
  id: string;
}
export type AgreementTerminatedEvent = TypedEvent<
  [string, string],
  AgreementTerminatedEventObject
>;

export type AgreementTerminatedEventFilter =
  TypedEventFilter<AgreementTerminatedEvent>;

export interface AgreementUpdatedEventObject {
  agreementClass: string;
  id: string;
  data: string[];
}
export type AgreementUpdatedEvent = TypedEvent<
  [string, string, string[]],
  AgreementUpdatedEventObject
>;

export type AgreementUpdatedEventFilter =
  TypedEventFilter<AgreementUpdatedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AuthorizedOperatorEventObject {
  operator: string;
  tokenHolder: string;
}
export type AuthorizedOperatorEvent = TypedEvent<
  [string, string],
  AuthorizedOperatorEventObject
>;

export type AuthorizedOperatorEventFilter =
  TypedEventFilter<AuthorizedOperatorEvent>;

export interface BailoutEventObject {
  bailoutAccount: string;
  bailoutAmount: BigNumber;
}
export type BailoutEvent = TypedEvent<[string, BigNumber], BailoutEventObject>;

export type BailoutEventFilter = TypedEventFilter<BailoutEvent>;

export interface BurnedEventObject {
  operator: string;
  from: string;
  amount: BigNumber;
  data: string;
  operatorData: string;
}
export type BurnedEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  BurnedEventObject
>;

export type BurnedEventFilter = TypedEventFilter<BurnedEvent>;

export interface MintedEventObject {
  operator: string;
  to: string;
  amount: BigNumber;
  data: string;
  operatorData: string;
}
export type MintedEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  MintedEventObject
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface RevokedOperatorEventObject {
  operator: string;
  tokenHolder: string;
}
export type RevokedOperatorEvent = TypedEvent<
  [string, string],
  RevokedOperatorEventObject
>;

export type RevokedOperatorEventFilter = TypedEventFilter<RevokedOperatorEvent>;

export interface SentEventObject {
  operator: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
  operatorData: string;
}
export type SentEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  SentEventObject
>;

export type SentEventFilter = TypedEventFilter<SentEvent>;

export interface TokenDowngradedEventObject {
  account: string;
  amount: BigNumber;
}
export type TokenDowngradedEvent = TypedEvent<
  [string, BigNumber],
  TokenDowngradedEventObject
>;

export type TokenDowngradedEventFilter = TypedEventFilter<TokenDowngradedEvent>;

export interface TokenUpgradedEventObject {
  account: string;
  amount: BigNumber;
}
export type TokenUpgradedEvent = TypedEvent<
  [string, BigNumber],
  TokenUpgradedEventObject
>;

export type TokenUpgradedEventFilter = TypedEventFilter<TokenUpgradedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ISuperToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISuperTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { activeAgreements: string[] }>;

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { data: string[] }>;

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { slotData: string[] }>;

    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<[string] & { host: string }>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCritical: boolean }>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCritical: boolean }>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSolvent: boolean }>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSolvent: boolean }>;

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2(
      id: PromiseOrValue<BytesLike>,
      liquidationTypeData: PromiseOrValue<BytesLike>,
      liquidatorAccount: PromiseOrValue<string>,
      useDefaultRewardAccount: PromiseOrValue<boolean>,
      targetAccount: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance(
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement(
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot(
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      slotData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Initialize the contract
     */
    initialize(
      underlyingToken: PromiseOrValue<string>,
      underlyingDecimals: PromiseOrValue<BigNumberish>,
      n: PromiseOrValue<string>,
      s: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the name of the token.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.
     */
    decimals(overrides?: CallOverrides): Promise<[number]>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the amount of tokens owned by an account (`owner`).
     */
    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.
     */
    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.
     * This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens.
     */
    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.
     */
    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
     */
    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
     */
    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.
     */
    granularity(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     */
    send(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}.
     */
    burn(
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.
     */
    isOperatorFor(
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Make an account an operator of the caller. See {isOperatorFor}.
     */
    authorizeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.
     */
    revokeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.
     */
    defaultOperators(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     */
    operatorSend(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}.
     */
    operatorBurn(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Mint new tokens for the account
     */
    selfMint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Burn existing tokens for the account
     */
    selfBurn(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.
     */
    selfTransferFrom(
      sender: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Give `spender`, `amount` allowance to spend the tokens of `account`.
     */
    selfApproveFor(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfer all available balance from `msg.sender` to `recipient`
     */
    transferAll(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Return the underlying token contract
     */
    getUnderlyingToken(
      overrides?: CallOverrides
    ): Promise<[string] & { tokenAddr: string }>;

    /**
     * Upgrade ERC20 to SuperToken.
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     */
    upgrade(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Upgrade ERC20 to SuperToken and transfer immediately
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     * @param data User data for the TokensRecipient callback
     * @param to The account to receive upgraded tokens
     */
    upgradeTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Downgrade SuperToken to ERC20.It will call transfer to send tokens
     * @param amount Number of tokens to be downgraded
     */
    downgrade(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Downgrade SuperToken to ERC20 and transfer immediately
     * @param amount Number of tokens to be downgraded (in 18 decimals)
     * @param to The account to receive downgraded tokens
     */
    downgradeTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Perform ERC20 approve by host contract.
     * @param account The account owner to be approved.
     * @param amount Number of tokens to be approved.
     * @param spender The spender of account owner's funds.
     */
    operationApprove(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Perform ERC20 transferFrom by host contract.
     * @param account The account to spend sender's funds.
     * @param amount Number of tokens to be transferred.
     * @param recipient The recipient of the funds.
     * @param spender The account where the funds is sent from.
     */
    operationTransferFrom(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Perform ERC777 send by host contract.
     * @param amount Number of tokens to be transferred.
     * @param data Arbitrary user inputted data
     * @param recipient The recipient of the funds.
     * @param spender The account where the funds is sent from.
     */
    operationSend(
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Upgrade ERC20 to SuperToken by host contract.
     * @param account The account to be changed.
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     */
    operationUpgrade(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Downgrade ERC20 to SuperToken by host contract.
     * @param account The account to be changed.
     * @param amount Number of tokens to be downgraded (in 18 decimals)
     */
    operationDowngrade(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Create a new agreement
   * @param data Agreement data
   * @param id Agreement ID
   */
  createAgreement(
    id: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * An active agreement is one that has state for the account
   * Get a list of agreements that is active for the account
   * @param account Account to query
   */
  getAccountActiveAgreements(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Get data of the agreement
   * @param agreementClass Contract address of the agreement
   * @param id Agreement ID
   */
  getAgreementData(
    agreementClass: PromiseOrValue<string>,
    id: PromiseOrValue<BytesLike>,
    dataLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Get data of the slot of the state of an agreement
   * @param account Account to query
   * @param agreementClass Contract address of the agreement
   * @param dataLength length of the state data
   * @param slotId slot id of the state
   */
  getAgreementStateSlot(
    agreementClass: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    slotId: PromiseOrValue<BigNumberish>,
    dataLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Get superfluid host contract address
   */
  getHost(overrides?: CallOverrides): Promise<string>;

  /**
   * A critical account is when availableBalance < 0
   * Check if account is critical
   * @param account The account to check
   * @param timestamp The time we'd like to check if the account is critical (should use future)
   */
  isAccountCritical(
    account: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * A critical account is when availableBalance < 0
   * Check if account is critical now (current host.getNow())
   * @param account The account to check
   */
  isAccountCriticalNow(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
   * Check if account is solvent
   * @param account The account to check
   * @param timestamp The time we'd like to check if the account is solvent (should use future)
   */
  isAccountSolvent(
    account: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
   * Check if account is solvent now
   * @param account The account to check
   */
  isAccountSolventNow(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Make liquidation payouts (v2)
   * @param id Agreement ID
   * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
   * @param liquidatorAccount Address of the executor of the liquidation
   * @param rewardAmount The amount the rewarded account will receive
   * @param targetAccount Account to be liquidated
   * @param targetAccountBalanceDelta The delta amount the target account balance should change by
   * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
   */
  makeLiquidationPayoutsV2(
    id: PromiseOrValue<BytesLike>,
    liquidationTypeData: PromiseOrValue<BytesLike>,
    liquidatorAccount: PromiseOrValue<string>,
    useDefaultRewardAccount: PromiseOrValue<boolean>,
    targetAccount: PromiseOrValue<string>,
    rewardAmount: PromiseOrValue<BigNumberish>,
    targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Calculate the real balance of a user, taking in consideration all agreements of the account
   * @param account for the query
   * @param timestamp Time of balance
   */
  realtimeBalanceOf(
    account: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  /**
   * realtimeBalanceOf with timestamp equals to block timestamp
   * Calculate the realtime balance given the current host.getNow() value
   * @param account for the query
   */
  realtimeBalanceOfNow(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      timestamp: BigNumber;
    }
  >;

  /**
   * The agreement needs to make sure that the balance delta is balanced afterwards
   * Settle balance from an account by the agreement
   * @param account Account to query.
   * @param delta Amount of balance delta to be settled
   */
  settleBalance(
    account: PromiseOrValue<string>,
    delta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Close the agreement
   * @param id Agreement ID
   */
  terminateAgreement(
    id: PromiseOrValue<BytesLike>,
    dataLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Create a new agreement
   * @param data Agreement data
   * @param id Agreement ID
   */
  updateAgreementData(
    id: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update agreement state slot
   * @param account Account to be updated
   */
  updateAgreementStateSlot(
    account: PromiseOrValue<string>,
    slotId: PromiseOrValue<BigNumberish>,
    slotData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Initialize the contract
   */
  initialize(
    underlyingToken: PromiseOrValue<string>,
    underlyingDecimals: PromiseOrValue<BigNumberish>,
    n: PromiseOrValue<string>,
    s: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the name of the token.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the symbol of the token, usually a shorter version of the name.
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.
   */
  decimals(overrides?: CallOverrides): Promise<number>;

  /**
   * See {IERC20-totalSupply}.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the amount of tokens owned by an account (`owner`).
   */
  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Moves `amount` tokens from the caller's account to `recipient`.
   */
  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.
   * This value changes when {approve} or {transferFrom} are called.
   */
  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Sets `amount` as the allowance of `spender` over the caller's tokens.
   */
  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.
   */
  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
   */
  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
   */
  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.
   */
  granularity(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
   */
  send(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}.
   */
  burn(
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.
   */
  isOperatorFor(
    operator: PromiseOrValue<string>,
    tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Make an account an operator of the caller. See {isOperatorFor}.
   */
  authorizeOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.
   */
  revokeOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.
   */
  defaultOperators(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
   */
  operatorSend(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}.
   */
  operatorBurn(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Mint new tokens for the account
   */
  selfMint(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Burn existing tokens for the account
   */
  selfBurn(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.
   */
  selfTransferFrom(
    sender: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Give `spender`, `amount` allowance to spend the tokens of `account`.
   */
  selfApproveFor(
    account: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfer all available balance from `msg.sender` to `recipient`
   */
  transferAll(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Return the underlying token contract
   */
  getUnderlyingToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Upgrade ERC20 to SuperToken.
   * @param amount Number of tokens to be upgraded (in 18 decimals)
   */
  upgrade(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Upgrade ERC20 to SuperToken and transfer immediately
   * @param amount Number of tokens to be upgraded (in 18 decimals)
   * @param data User data for the TokensRecipient callback
   * @param to The account to receive upgraded tokens
   */
  upgradeTo(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Downgrade SuperToken to ERC20.It will call transfer to send tokens
   * @param amount Number of tokens to be downgraded
   */
  downgrade(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Downgrade SuperToken to ERC20 and transfer immediately
   * @param amount Number of tokens to be downgraded (in 18 decimals)
   * @param to The account to receive downgraded tokens
   */
  downgradeTo(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Perform ERC20 approve by host contract.
   * @param account The account owner to be approved.
   * @param amount Number of tokens to be approved.
   * @param spender The spender of account owner's funds.
   */
  operationApprove(
    account: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Perform ERC20 transferFrom by host contract.
   * @param account The account to spend sender's funds.
   * @param amount Number of tokens to be transferred.
   * @param recipient The recipient of the funds.
   * @param spender The account where the funds is sent from.
   */
  operationTransferFrom(
    account: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Perform ERC777 send by host contract.
   * @param amount Number of tokens to be transferred.
   * @param data Arbitrary user inputted data
   * @param recipient The recipient of the funds.
   * @param spender The account where the funds is sent from.
   */
  operationSend(
    spender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Upgrade ERC20 to SuperToken by host contract.
   * @param account The account to be changed.
   * @param amount Number of tokens to be upgraded (in 18 decimals)
   */
  operationUpgrade(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Downgrade ERC20 to SuperToken by host contract.
   * @param account The account to be changed.
   * @param amount Number of tokens to be downgraded (in 18 decimals)
   */
  operationDowngrade(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<string>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2(
      id: PromiseOrValue<BytesLike>,
      liquidationTypeData: PromiseOrValue<BytesLike>,
      liquidatorAccount: PromiseOrValue<string>,
      useDefaultRewardAccount: PromiseOrValue<boolean>,
      targetAccount: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        availableBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
        timestamp: BigNumber;
      }
    >;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance(
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement(
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot(
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      slotData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Initialize the contract
     */
    initialize(
      underlyingToken: PromiseOrValue<string>,
      underlyingDecimals: PromiseOrValue<BigNumberish>,
      n: PromiseOrValue<string>,
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the name of the token.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.
     */
    decimals(overrides?: CallOverrides): Promise<number>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the amount of tokens owned by an account (`owner`).
     */
    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.
     */
    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.
     * This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens.
     */
    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.
     */
    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
     */
    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
     */
    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.
     */
    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     */
    send(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}.
     */
    burn(
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.
     */
    isOperatorFor(
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Make an account an operator of the caller. See {isOperatorFor}.
     */
    authorizeOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.
     */
    revokeOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.
     */
    defaultOperators(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     */
    operatorSend(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}.
     */
    operatorBurn(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Mint new tokens for the account
     */
    selfMint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Burn existing tokens for the account
     */
    selfBurn(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.
     */
    selfTransferFrom(
      sender: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Give `spender`, `amount` allowance to spend the tokens of `account`.
     */
    selfApproveFor(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfer all available balance from `msg.sender` to `recipient`
     */
    transferAll(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Return the underlying token contract
     */
    getUnderlyingToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Upgrade ERC20 to SuperToken.
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     */
    upgrade(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade ERC20 to SuperToken and transfer immediately
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     * @param data User data for the TokensRecipient callback
     * @param to The account to receive upgraded tokens
     */
    upgradeTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Downgrade SuperToken to ERC20.It will call transfer to send tokens
     * @param amount Number of tokens to be downgraded
     */
    downgrade(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Downgrade SuperToken to ERC20 and transfer immediately
     * @param amount Number of tokens to be downgraded (in 18 decimals)
     * @param to The account to receive downgraded tokens
     */
    downgradeTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Perform ERC20 approve by host contract.
     * @param account The account owner to be approved.
     * @param amount Number of tokens to be approved.
     * @param spender The spender of account owner's funds.
     */
    operationApprove(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Perform ERC20 transferFrom by host contract.
     * @param account The account to spend sender's funds.
     * @param amount Number of tokens to be transferred.
     * @param recipient The recipient of the funds.
     * @param spender The account where the funds is sent from.
     */
    operationTransferFrom(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Perform ERC777 send by host contract.
     * @param amount Number of tokens to be transferred.
     * @param data Arbitrary user inputted data
     * @param recipient The recipient of the funds.
     * @param spender The account where the funds is sent from.
     */
    operationSend(
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade ERC20 to SuperToken by host contract.
     * @param account The account to be changed.
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     */
    operationUpgrade(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Downgrade ERC20 to SuperToken by host contract.
     * @param account The account to be changed.
     * @param amount Number of tokens to be downgraded (in 18 decimals)
     */
    operationDowngrade(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AgreementCreated(address,bytes32,bytes32[])"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      data?: null
    ): AgreementCreatedEventFilter;
    AgreementCreated(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      data?: null
    ): AgreementCreatedEventFilter;

    "AgreementLiquidated(address,bytes32,address,address,uint256)"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      penaltyAccount?: PromiseOrValue<string> | null,
      rewardAccount?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): AgreementLiquidatedEventFilter;
    AgreementLiquidated(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      penaltyAccount?: PromiseOrValue<string> | null,
      rewardAccount?: PromiseOrValue<string> | null,
      rewardAmount?: null
    ): AgreementLiquidatedEventFilter;

    "AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)"(
      liquidatorAccount?: null,
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      penaltyAccount?: PromiseOrValue<string> | null,
      bondAccount?: PromiseOrValue<string> | null,
      rewardAmount?: null,
      bailoutAmount?: null
    ): AgreementLiquidatedByEventFilter;
    AgreementLiquidatedBy(
      liquidatorAccount?: null,
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      penaltyAccount?: PromiseOrValue<string> | null,
      bondAccount?: PromiseOrValue<string> | null,
      rewardAmount?: null,
      bailoutAmount?: null
    ): AgreementLiquidatedByEventFilter;

    "AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      liquidatorAccount?: PromiseOrValue<string> | null,
      targetAccount?: PromiseOrValue<string> | null,
      rewardAmountReceiver?: null,
      rewardAmount?: null,
      targetAccountBalanceDelta?: null,
      liquidationTypeData?: null
    ): AgreementLiquidatedV2EventFilter;
    AgreementLiquidatedV2(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      liquidatorAccount?: PromiseOrValue<string> | null,
      targetAccount?: PromiseOrValue<string> | null,
      rewardAmountReceiver?: null,
      rewardAmount?: null,
      targetAccountBalanceDelta?: null,
      liquidationTypeData?: null
    ): AgreementLiquidatedV2EventFilter;

    "AgreementStateUpdated(address,address,uint256)"(
      agreementClass?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      slotId?: null
    ): AgreementStateUpdatedEventFilter;
    AgreementStateUpdated(
      agreementClass?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      slotId?: null
    ): AgreementStateUpdatedEventFilter;

    "AgreementTerminated(address,bytes32)"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null
    ): AgreementTerminatedEventFilter;
    AgreementTerminated(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null
    ): AgreementTerminatedEventFilter;

    "AgreementUpdated(address,bytes32,bytes32[])"(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      data?: null
    ): AgreementUpdatedEventFilter;
    AgreementUpdated(
      agreementClass?: PromiseOrValue<string> | null,
      id?: null,
      data?: null
    ): AgreementUpdatedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "AuthorizedOperator(address,address)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorEventFilter;
    AuthorizedOperator(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorEventFilter;

    "Bailout(address,uint256)"(
      bailoutAccount?: PromiseOrValue<string> | null,
      bailoutAmount?: null
    ): BailoutEventFilter;
    Bailout(
      bailoutAccount?: PromiseOrValue<string> | null,
      bailoutAmount?: null
    ): BailoutEventFilter;

    "Burned(address,address,uint256,bytes,bytes)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      operatorData?: null
    ): BurnedEventFilter;
    Burned(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      operatorData?: null
    ): BurnedEventFilter;

    "Minted(address,address,uint256,bytes,bytes)"(
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      operatorData?: null
    ): MintedEventFilter;
    Minted(
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      operatorData?: null
    ): MintedEventFilter;

    "RevokedOperator(address,address)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorEventFilter;
    RevokedOperator(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorEventFilter;

    "Sent(address,address,address,uint256,bytes,bytes)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      operatorData?: null
    ): SentEventFilter;
    Sent(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      data?: null,
      operatorData?: null
    ): SentEventFilter;

    "TokenDowngraded(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenDowngradedEventFilter;
    TokenDowngraded(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenDowngradedEventFilter;

    "TokenUpgraded(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenUpgradedEventFilter;
    TokenUpgraded(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenUpgradedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2(
      id: PromiseOrValue<BytesLike>,
      liquidationTypeData: PromiseOrValue<BytesLike>,
      liquidatorAccount: PromiseOrValue<string>,
      useDefaultRewardAccount: PromiseOrValue<boolean>,
      targetAccount: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance(
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement(
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot(
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      slotData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Initialize the contract
     */
    initialize(
      underlyingToken: PromiseOrValue<string>,
      underlyingDecimals: PromiseOrValue<BigNumberish>,
      n: PromiseOrValue<string>,
      s: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the name of the token.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.
     */
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the amount of tokens owned by an account (`owner`).
     */
    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.
     */
    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.
     * This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens.
     */
    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.
     */
    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
     */
    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
     */
    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.
     */
    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     */
    send(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}.
     */
    burn(
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.
     */
    isOperatorFor(
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Make an account an operator of the caller. See {isOperatorFor}.
     */
    authorizeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.
     */
    revokeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.
     */
    defaultOperators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     */
    operatorSend(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}.
     */
    operatorBurn(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Mint new tokens for the account
     */
    selfMint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Burn existing tokens for the account
     */
    selfBurn(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.
     */
    selfTransferFrom(
      sender: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Give `spender`, `amount` allowance to spend the tokens of `account`.
     */
    selfApproveFor(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfer all available balance from `msg.sender` to `recipient`
     */
    transferAll(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Return the underlying token contract
     */
    getUnderlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Upgrade ERC20 to SuperToken.
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     */
    upgrade(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Upgrade ERC20 to SuperToken and transfer immediately
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     * @param data User data for the TokensRecipient callback
     * @param to The account to receive upgraded tokens
     */
    upgradeTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Downgrade SuperToken to ERC20.It will call transfer to send tokens
     * @param amount Number of tokens to be downgraded
     */
    downgrade(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Downgrade SuperToken to ERC20 and transfer immediately
     * @param amount Number of tokens to be downgraded (in 18 decimals)
     * @param to The account to receive downgraded tokens
     */
    downgradeTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Perform ERC20 approve by host contract.
     * @param account The account owner to be approved.
     * @param amount Number of tokens to be approved.
     * @param spender The spender of account owner's funds.
     */
    operationApprove(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Perform ERC20 transferFrom by host contract.
     * @param account The account to spend sender's funds.
     * @param amount Number of tokens to be transferred.
     * @param recipient The recipient of the funds.
     * @param spender The account where the funds is sent from.
     */
    operationTransferFrom(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Perform ERC777 send by host contract.
     * @param amount Number of tokens to be transferred.
     * @param data Arbitrary user inputted data
     * @param recipient The recipient of the funds.
     * @param spender The account where the funds is sent from.
     */
    operationSend(
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Upgrade ERC20 to SuperToken by host contract.
     * @param account The account to be changed.
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     */
    operationUpgrade(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Downgrade ERC20 to SuperToken by host contract.
     * @param account The account to be changed.
     * @param amount Number of tokens to be downgraded (in 18 decimals)
     */
    operationDowngrade(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    createAgreement(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * An active agreement is one that has state for the account
     * Get a list of agreements that is active for the account
     * @param account Account to query
     */
    getAccountActiveAgreements(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get data of the agreement
     * @param agreementClass Contract address of the agreement
     * @param id Agreement ID
     */
    getAgreementData(
      agreementClass: PromiseOrValue<string>,
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get data of the slot of the state of an agreement
     * @param account Account to query
     * @param agreementClass Contract address of the agreement
     * @param dataLength length of the state data
     * @param slotId slot id of the state
     */
    getAgreementStateSlot(
      agreementClass: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get superfluid host contract address
     */
    getHost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is critical (should use future)
     */
    isAccountCritical(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A critical account is when availableBalance < 0
     * Check if account is critical now (current host.getNow())
     * @param account The account to check
     */
    isAccountCriticalNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent
     * @param account The account to check
     * @param timestamp The time we'd like to check if the account is solvent (should use future)
     */
    isAccountSolvent(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance
     * Check if account is solvent now
     * @param account The account to check
     */
    isAccountSolventNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Make liquidation payouts (v2)
     * @param id Agreement ID
     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type
     * @param liquidatorAccount Address of the executor of the liquidation
     * @param rewardAmount The amount the rewarded account will receive
     * @param targetAccount Account to be liquidated
     * @param targetAccountBalanceDelta The delta amount the target account balance should change by
     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount
     */
    makeLiquidationPayoutsV2(
      id: PromiseOrValue<BytesLike>,
      liquidationTypeData: PromiseOrValue<BytesLike>,
      liquidatorAccount: PromiseOrValue<string>,
      useDefaultRewardAccount: PromiseOrValue<boolean>,
      targetAccount: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      targetAccountBalanceDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Calculate the real balance of a user, taking in consideration all agreements of the account
     * @param account for the query
     * @param timestamp Time of balance
     */
    realtimeBalanceOf(
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * realtimeBalanceOf with timestamp equals to block timestamp
     * Calculate the realtime balance given the current host.getNow() value
     * @param account for the query
     */
    realtimeBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The agreement needs to make sure that the balance delta is balanced afterwards
     * Settle balance from an account by the agreement
     * @param account Account to query.
     * @param delta Amount of balance delta to be settled
     */
    settleBalance(
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Close the agreement
     * @param id Agreement ID
     */
    terminateAgreement(
      id: PromiseOrValue<BytesLike>,
      dataLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Create a new agreement
     * @param data Agreement data
     * @param id Agreement ID
     */
    updateAgreementData(
      id: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update agreement state slot
     * @param account Account to be updated
     */
    updateAgreementStateSlot(
      account: PromiseOrValue<string>,
      slotId: PromiseOrValue<BigNumberish>,
      slotData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Initialize the contract
     */
    initialize(
      underlyingToken: PromiseOrValue<string>,
      underlyingDecimals: PromiseOrValue<BigNumberish>,
      n: PromiseOrValue<string>,
      s: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the name of the token.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the symbol of the token, usually a shorter version of the name.
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.
     */
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC20-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the amount of tokens owned by an account (`owner`).
     */
    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.
     */
    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.
     * This value changes when {approve} or {transferFrom} are called.
     */
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets `amount` as the allowance of `spender` over the caller's tokens.
     */
    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.
     */
    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
     */
    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.
     */
    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.
     */
    granularity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     */
    send(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}.
     */
    burn(
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.
     */
    isOperatorFor(
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Make an account an operator of the caller. See {isOperatorFor}.
     */
    authorizeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.
     */
    revokeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.
     */
    defaultOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     */
    operatorSend(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}.
     */
    operatorBurn(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Mint new tokens for the account
     */
    selfMint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Burn existing tokens for the account
     */
    selfBurn(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.
     */
    selfTransferFrom(
      sender: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Give `spender`, `amount` allowance to spend the tokens of `account`.
     */
    selfApproveFor(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer all available balance from `msg.sender` to `recipient`
     */
    transferAll(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Return the underlying token contract
     */
    getUnderlyingToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade ERC20 to SuperToken.
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     */
    upgrade(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade ERC20 to SuperToken and transfer immediately
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     * @param data User data for the TokensRecipient callback
     * @param to The account to receive upgraded tokens
     */
    upgradeTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Downgrade SuperToken to ERC20.It will call transfer to send tokens
     * @param amount Number of tokens to be downgraded
     */
    downgrade(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Downgrade SuperToken to ERC20 and transfer immediately
     * @param amount Number of tokens to be downgraded (in 18 decimals)
     * @param to The account to receive downgraded tokens
     */
    downgradeTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Perform ERC20 approve by host contract.
     * @param account The account owner to be approved.
     * @param amount Number of tokens to be approved.
     * @param spender The spender of account owner's funds.
     */
    operationApprove(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Perform ERC20 transferFrom by host contract.
     * @param account The account to spend sender's funds.
     * @param amount Number of tokens to be transferred.
     * @param recipient The recipient of the funds.
     * @param spender The account where the funds is sent from.
     */
    operationTransferFrom(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Perform ERC777 send by host contract.
     * @param amount Number of tokens to be transferred.
     * @param data Arbitrary user inputted data
     * @param recipient The recipient of the funds.
     * @param spender The account where the funds is sent from.
     */
    operationSend(
      spender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade ERC20 to SuperToken by host contract.
     * @param account The account to be changed.
     * @param amount Number of tokens to be upgraded (in 18 decimals)
     */
    operationUpgrade(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Downgrade ERC20 to SuperToken by host contract.
     * @param account The account to be changed.
     * @param amount Number of tokens to be downgraded (in 18 decimals)
     */
    operationDowngrade(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
