/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IConstantFlowAgreementV1Contract
  extends Truffle.Contract<IConstantFlowAgreementV1Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IConstantFlowAgreementV1Instance>;
}

export interface FlowOperatorUpdated {
  name: "FlowOperatorUpdated";
  args: {
    token: string;
    sender: string;
    flowOperator: string;
    permissions: BN;
    flowRateAllowance: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface FlowUpdated {
  name: "FlowUpdated";
  args: {
    token: string;
    sender: string;
    receiver: string;
    flowRate: BN;
    totalSenderFlowRate: BN;
    totalReceiverFlowRate: BN;
    userData: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: string;
  };
}

export interface FlowUpdatedExtension {
  name: "FlowUpdatedExtension";
  args: {
    flowOperator: string;
    deposit: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = FlowOperatorUpdated | FlowUpdated | FlowUpdatedExtension;

export interface IConstantFlowAgreementV1Instance
  extends Truffle.ContractInstance {
  /**
   * Calculate the real-time balance for the account of this agreement class
   * @param account Account the state belongs to
   * @param time Time used for the calculation
   */
  realtimeBalanceOf(
    token: string,
    account: string,
    time: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  /**
   * ISuperAgreement.agreementType implementation
   */
  agreementType(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * The deposit is clipped and rounded down
   * Get the maximum flow rate allowed with the deposit
   * @param deposit Deposit amount used for creating the flow
   */
  getMaximumFlowRateFromDeposit(
    token: string,
    deposit: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Calculates the deposit based on the liquidationPeriod and flowRate
   * Get the deposit required for creating the flow
   * @param flowRate Flow rate to be tested
   */
  getDepositRequiredForFlowRate(
    token: string,
    flowRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns whether it is the patrician period based on host.getNow()
   * @param account The account we are interested in
   */
  isPatricianPeriodNow(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: BN }>;

  /**
   * Returns whether it is the patrician period based on timestamp
   * @param account The account we are interested in
   * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod
   */
  isPatricianPeriod(
    token: string,
    account: string,
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowOperator The permission grantee address
   * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)
   * @param permissions A bitmask representation of the granted permissions
   * @param token Super token address
   */
  updateFlowOperatorPermissions: {
    (
      token: string,
      flowOperator: string,
      permissions: number | BN | string,
      flowRateAllowance: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      flowOperator: string,
      permissions: number | BN | string,
      flowRateAllowance: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      flowOperator: string,
      permissions: number | BN | string,
      flowRateAllowance: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      flowOperator: string,
      permissions: number | BN | string,
      flowRateAllowance: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowOperator The permission grantee address
   * @param token Super token address
   */
  authorizeFlowOperatorWithFullControl: {
    (
      token: string,
      flowOperator: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      flowOperator: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      flowOperator: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      flowOperator: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * `permissions` and `flowRateAllowance` will both be set to 0
   * msgSender from `ctx` revokes `flowOperator` create/update/delete permissions
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowOperator The permission grantee address
   * @param token Super token address
   */
  revokeFlowOperatorWithFullControl: {
    (
      token: string,
      flowOperator: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      flowOperator: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      flowOperator: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      flowOperator: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the permissions of a flow operator between `sender` and `flowOperator` for `token`
   * @param flowOperator The permission grantee address
   * @param sender The permission granter address
   * @param token Super token address
   */
  getFlowOperatorData(
    token: string,
    sender: string,
    flowOperator: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: BN }>;

  /**
   * Get flow operator using flowOperatorId
   * @param flowOperatorId The keccak256 hash of encoded string "flowOperator", sender and flowOperator
   * @param token Super token address
   */
  getFlowOperatorDataByID(
    token: string,
    flowOperatorId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  /**
   * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
   * Create a flow betwen ctx.msgSender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowRate New flow rate in amount per second
   * @param receiver Flow receiver address
   * @param token Super token address
   */
  createFlow: {
    (
      token: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A flow created by an approved flow operator (see above for details on callbacks)
   * Create a flow between sender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowRate New flow rate in amount per second
   * @param receiver Flow receiver address
   * @param sender Flow sender address (has granted permissions)
   * @param token Super token address
   */
  createFlowByOperator: {
    (
      token: string,
      sender: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      sender: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      sender: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      sender: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
   * Update the flow rate between ctx.msgSender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowRate New flow rate in amount per second
   * @param receiver Flow receiver address
   * @param token Super token address
   */
  updateFlow: {
    (
      token: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A flow updated by an approved flow operator (see above for details on callbacks)
   * Update a flow between sender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowRate New flow rate in amount per second
   * @param receiver Flow receiver address
   * @param sender Flow sender address (has granted permissions)
   * @param token Super token address
   */
  updateFlowByOperator: {
    (
      token: string,
      sender: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      sender: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      sender: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      sender: string,
      receiver: string,
      flowRate: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the flow data between `sender` and `receiver` of `token`
   * @param receiver Flow sender
   * @param sender Flow receiver
   * @param token Super token address
   */
  getFlow(
    token: string,
    sender: string,
    receiver: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  /**
   * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
   * Get flow data using agreementId
   * @param agreementId The agreement ID
   * @param token Super token address
   */
  getFlowByID(
    token: string,
    agreementId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  /**
   * Get the aggregated flow info of the account
   * @param account Account for the query
   * @param token Super token address
   */
  getAccountFlowInfo(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  /**
   * Get the net flow rate of the account
   * @param account Account for the query
   * @param token Super token address
   */
  getNetFlow(
    token: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
   * Delete the flow between sender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param receiver Flow receiver address
   * @param token Super token address
   */
  deleteFlow: {
    (
      token: string,
      sender: string,
      receiver: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      sender: string,
      receiver: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      sender: string,
      receiver: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      sender: string,
      receiver: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A flow deleted by an approved flow operator (see above for details on callbacks)
   * Delete the flow between sender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param receiver Flow receiver address
   * @param token Super token address
   */
  deleteFlowByOperator: {
    (
      token: string,
      sender: string,
      receiver: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      sender: string,
      receiver: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      sender: string,
      receiver: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      sender: string,
      receiver: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: string,
      account: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * The deposit is clipped and rounded down
     * Get the maximum flow rate allowed with the deposit
     * @param deposit Deposit amount used for creating the flow
     */
    getMaximumFlowRateFromDeposit(
      token: string,
      deposit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Calculates the deposit based on the liquidationPeriod and flowRate
     * Get the deposit required for creating the flow
     * @param flowRate Flow rate to be tested
     */
    getDepositRequiredForFlowRate(
      token: string,
      flowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns whether it is the patrician period based on host.getNow()
     * @param account The account we are interested in
     */
    isPatricianPeriodNow(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: BN }>;

    /**
     * Returns whether it is the patrician period based on timestamp
     * @param account The account we are interested in
     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod
     */
    isPatricianPeriod(
      token: string,
      account: string,
      timestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)
     * @param permissions A bitmask representation of the granted permissions
     * @param token Super token address
     */
    updateFlowOperatorPermissions: {
      (
        token: string,
        flowOperator: string,
        permissions: number | BN | string,
        flowRateAllowance: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        flowOperator: string,
        permissions: number | BN | string,
        flowRateAllowance: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        flowOperator: string,
        permissions: number | BN | string,
        flowRateAllowance: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        flowOperator: string,
        permissions: number | BN | string,
        flowRateAllowance: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    authorizeFlowOperatorWithFullControl: {
      (
        token: string,
        flowOperator: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        flowOperator: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        flowOperator: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        flowOperator: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * `permissions` and `flowRateAllowance` will both be set to 0
     * msgSender from `ctx` revokes `flowOperator` create/update/delete permissions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    revokeFlowOperatorWithFullControl: {
      (
        token: string,
        flowOperator: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        flowOperator: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        flowOperator: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        flowOperator: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the permissions of a flow operator between `sender` and `flowOperator` for `token`
     * @param flowOperator The permission grantee address
     * @param sender The permission granter address
     * @param token Super token address
     */
    getFlowOperatorData(
      token: string,
      sender: string,
      flowOperator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: BN }>;

    /**
     * Get flow operator using flowOperatorId
     * @param flowOperatorId The keccak256 hash of encoded string "flowOperator", sender and flowOperator
     * @param token Super token address
     */
    getFlowOperatorDataByID(
      token: string,
      flowOperatorId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Create a flow betwen ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    createFlow: {
      (
        token: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A flow created by an approved flow operator (see above for details on callbacks)
     * Create a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    createFlowByOperator: {
      (
        token: string,
        sender: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        sender: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        sender: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        sender: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Update the flow rate between ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    updateFlow: {
      (
        token: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A flow updated by an approved flow operator (see above for details on callbacks)
     * Update a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    updateFlowByOperator: {
      (
        token: string,
        sender: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        sender: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        sender: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        sender: string,
        receiver: string,
        flowRate: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the flow data between `sender` and `receiver` of `token`
     * @param receiver Flow sender
     * @param sender Flow receiver
     * @param token Super token address
     */
    getFlow(
      token: string,
      sender: string,
      receiver: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Get flow data using agreementId
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getFlowByID(
      token: string,
      agreementId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    /**
     * Get the aggregated flow info of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getAccountFlowInfo(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    /**
     * Get the net flow rate of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getNetFlow(
      token: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlow: {
      (
        token: string,
        sender: string,
        receiver: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        sender: string,
        receiver: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        sender: string,
        receiver: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        sender: string,
        receiver: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A flow deleted by an approved flow operator (see above for details on callbacks)
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlowByOperator: {
      (
        token: string,
        sender: string,
        receiver: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        sender: string,
        receiver: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        sender: string,
        receiver: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        sender: string,
        receiver: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
