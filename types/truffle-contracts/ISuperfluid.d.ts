/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISuperfluidContract
  extends Truffle.Contract<ISuperfluidInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISuperfluidInstance>;
}

export interface AgreementClassRegistered {
  name: "AgreementClassRegistered";
  args: {
    agreementType: string;
    code: string;
    0: string;
    1: string;
  };
}

export interface AgreementClassUpdated {
  name: "AgreementClassUpdated";
  args: {
    agreementType: string;
    code: string;
    0: string;
    1: string;
  };
}

export interface AppRegistered {
  name: "AppRegistered";
  args: {
    app: string;
    0: string;
  };
}

export interface GovernanceReplaced {
  name: "GovernanceReplaced";
  args: {
    oldGov: string;
    newGov: string;
    0: string;
    1: string;
  };
}

export interface Jail {
  name: "Jail";
  args: {
    app: string;
    reason: BN;
    0: string;
    1: BN;
  };
}

export interface SuperTokenFactoryUpdated {
  name: "SuperTokenFactoryUpdated";
  args: {
    newFactory: string;
    0: string;
  };
}

export interface SuperTokenLogicUpdated {
  name: "SuperTokenLogicUpdated";
  args: {
    token: string;
    code: string;
    0: string;
    1: string;
  };
}

type AllEvents =
  | AgreementClassRegistered
  | AgreementClassUpdated
  | AppRegistered
  | GovernanceReplaced
  | Jail
  | SuperTokenFactoryUpdated
  | SuperTokenLogicUpdated;

export interface ISuperfluidInstance extends Truffle.ContractInstance {
  getNow(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Get the current governance address of the Superfluid host
   */
  getGovernance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Replace the current governance with a new one
   */
  replaceGovernance: {
    (newGov: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(newGov: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      newGov: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newGov: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Register a new agreement class to the system
   * @param agreementClassLogic Initial agreement class code
   */
  registerAgreementClass: {
    (
      agreementClassLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      agreementClassLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      agreementClassLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      agreementClassLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update code of an agreement class
   * @param agreementClassLogic New code for the agreement class
   */
  updateAgreementClass: {
    (
      agreementClassLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      agreementClassLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      agreementClassLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      agreementClassLogic: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * agreementType is the keccak256 hash of: "org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>"
   * Check if the agreement type is whitelisted
   */
  isAgreementTypeListed(
    agreementType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Check if the agreement class is whitelisted
   */
  isAgreementClassListed(
    agreementClass: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * agreementType is the keccak256 hash of: "org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>"
   * Get agreement class
   */
  getAgreementClass(
    agreementType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Map list of the agreement classes using a bitmap
   * @param bitmap Agreement class bitmap
   */
  mapAgreementClasses(
    bitmap: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * agreementType is the keccak256 hash of: "org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>"
   * Create a new bitmask by adding a agreement class to it
   * @param bitmap Agreement class bitmap
   */
  addToAgreementClassesBitmap(
    bitmap: number | BN | string,
    agreementType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * agreementType is the keccak256 hash of: "org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>"
   * Create a new bitmask by removing a agreement class from it
   * @param bitmap Agreement class bitmap
   */
  removeFromAgreementClassesBitmap(
    bitmap: number | BN | string,
    agreementType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the super token factory
   */
  getSuperTokenFactory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Get the super token factory logic (applicable to upgradable deployment)
   */
  getSuperTokenFactoryLogic(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Update super token factory
   * @param newFactory New factory logic
   */
  updateSuperTokenFactory: {
    (newFactory: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newFactory: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newFactory: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newFactory: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Refer to ISuperTokenFactory.Upgradability for expected behaviours
   * Update the super token logic to the latest
   */
  updateSuperTokenLogic: {
    (token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Message sender (must be a contract) declares itself as a super app.
   * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`
   */
  registerApp: {
    (
      configWord: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      configWord: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      configWord: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      configWord: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Message sender declares itself as a super app.
   * See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for.
   * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`
   * @param registrationKey The registration key issued by the governance, needed to register on a mainnet.
   */
  registerAppWithKey: {
    (
      configWord: number | BN | string,
      registrationKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      configWord: number | BN | string,
      registrationKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      configWord: number | BN | string,
      registrationKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      configWord: number | BN | string,
      registrationKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Message sender (must be a contract) declares app as a super app
   * On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide
   * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`
   */
  registerAppByFactory: {
    (
      app: string,
      configWord: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      app: string,
      configWord: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      app: string,
      configWord: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      app: string,
      configWord: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Query if the app is registered
   * @param app Super app address
   */
  isApp(app: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Query app callbacklevel
   * @param app Super app address
   */
  getAppCallbackLevel(
    app: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Get the manifest of the super app
   * @param app Super app address
   */
  getAppManifest(
    app: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: boolean; 2: BN }>;

  /**
   * Query if the app has been jailed
   * @param app Super app address
   */
  isAppJailed(
    app: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Whitelist the target app for app composition for the source app (msg.sender)
   * @param targetApp The target super app address
   */
  allowCompositeApp: {
    (targetApp: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      targetApp: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      targetApp: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      targetApp: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Query if source app is allowed to call the target app as downstream app
   * @param app Super app address
   * @param targetApp The target super app address
   */
  isCompositeAppAllowed(
    app: string,
    targetApp: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * (For agreements) StaticCall the app before callback
   * @param app The super app.
   * @param callData The call data sending to the super app.
   * @param ctx Current ctx, it will be validated.
   * @param isTermination Is it a termination callback?
   */
  callAppBeforeCallback: {
    (
      app: string,
      callData: string,
      isTermination: boolean,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      app: string,
      callData: string,
      isTermination: boolean,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      app: string,
      callData: string,
      isTermination: boolean,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      app: string,
      callData: string,
      isTermination: boolean,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * (For agreements) Call the app after callback
   * @param app The super app.
   * @param callData The call data sending to the super app.
   * @param ctx Current ctx, it will be validated.
   * @param isTermination Is it a termination callback?
   */
  callAppAfterCallback: {
    (
      app: string,
      callData: string,
      isTermination: boolean,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      app: string,
      callData: string,
      isTermination: boolean,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      app: string,
      callData: string,
      isTermination: boolean,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      app: string,
      callData: string,
      isTermination: boolean,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * (For agreements) Create a new callback stack
   * @param app The super app.
   * @param appCreditGranted App credit granted so far.
   * @param appCreditUsed App credit used so far.
   * @param ctx The current ctx, it will be validated.
   */
  appCallbackPush: {
    (
      ctx: string,
      app: string,
      appCreditGranted: number | BN | string,
      appCreditUsed: number | BN | string,
      appCreditToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ctx: string,
      app: string,
      appCreditGranted: number | BN | string,
      appCreditUsed: number | BN | string,
      appCreditToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      ctx: string,
      app: string,
      appCreditGranted: number | BN | string,
      appCreditUsed: number | BN | string,
      appCreditToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ctx: string,
      app: string,
      appCreditGranted: number | BN | string,
      appCreditUsed: number | BN | string,
      appCreditToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * (For agreements) Pop from the current app callback stack
   * @param appCreditUsedDelta App credit used by the app.
   * @param ctx The ctx that was pushed before the callback stack.
   */
  appCallbackPop: {
    (
      ctx: string,
      appCreditUsedDelta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ctx: string,
      appCreditUsedDelta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      ctx: string,
      appCreditUsedDelta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ctx: string,
      appCreditUsedDelta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * (For agreements) Use app credit.
   * @param appCreditUsedMore See app credit for more details.
   * @param ctx The current ctx, it will be validated.
   */
  ctxUseCredit: {
    (
      ctx: string,
      appCreditUsedMore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ctx: string,
      appCreditUsedMore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      ctx: string,
      appCreditUsedMore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ctx: string,
      appCreditUsedMore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * (For agreements) Jail the app.
   * @param app The super app.
   * @param reason Jail reason code.
   */
  jailApp: {
    (
      ctx: string,
      app: string,
      reason: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ctx: string,
      app: string,
      reason: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      ctx: string,
      app: string,
      reason: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ctx: string,
      app: string,
      reason: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Call agreement function
   * @param agreementClass The agreement address you are calling
   * @param callData The contextual call data with placeholder ctx
   * @param userData Extra user data being sent to the super app callbacks
   */
  callAgreement: {
    (
      agreementClass: string,
      callData: string,
      userData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      agreementClass: string,
      callData: string,
      userData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      agreementClass: string,
      callData: string,
      userData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      agreementClass: string,
      callData: string,
      userData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Main use case is calling app action in a batch call via the host
   * Call app action
   * @param callData The contextual call data
   */
  callAppAction: {
    (
      app: string,
      callData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      app: string,
      callData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      app: string,
      callData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      app: string,
      callData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  callAgreementWithContext: {
    (
      agreementClass: string,
      callData: string,
      userData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      agreementClass: string,
      callData: string,
      userData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string }>;
    sendTransaction(
      agreementClass: string,
      callData: string,
      userData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      agreementClass: string,
      callData: string,
      userData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  callAppActionWithContext: {
    (
      app: string,
      callData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      app: string,
      callData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      app: string,
      callData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      app: string,
      callData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeCtx(
    ctx: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    appCallbackLevel: BN;
    callType: BN;
    timestamp: BN;
    msgSender: string;
    agreementSelector: string;
    userData: string;
    appCreditGranted: BN;
    appCreditWantedDeprecated: BN;
    appCreditUsed: BN;
    appAddress: string;
    appCreditToken: string;
  }>;

  isCtxValid(
    ctx: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  batchCall: {
    (
      operations: {
        operationType: number | BN | string;
        target: string;
        data: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      operations: {
        operationType: number | BN | string;
        target: string;
        data: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operations: {
        operationType: number | BN | string;
        target: string;
        data: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operations: {
        operationType: number | BN | string;
        target: string;
        data: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  forwardBatchCall: {
    (
      operations: {
        operationType: number | BN | string;
        target: string;
        data: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      operations: {
        operationType: number | BN | string;
        target: string;
        data: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operations: {
        operationType: number | BN | string;
        target: string;
        data: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operations: {
        operationType: number | BN | string;
        target: string;
        data: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getNow(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Get the current governance address of the Superfluid host
     */
    getGovernance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Replace the current governance with a new one
     */
    replaceGovernance: {
      (newGov: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newGov: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newGov: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newGov: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Register a new agreement class to the system
     * @param agreementClassLogic Initial agreement class code
     */
    registerAgreementClass: {
      (
        agreementClassLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        agreementClassLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        agreementClassLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        agreementClassLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update code of an agreement class
     * @param agreementClassLogic New code for the agreement class
     */
    updateAgreementClass: {
      (
        agreementClassLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        agreementClassLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        agreementClassLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        agreementClassLogic: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * agreementType is the keccak256 hash of: "org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>"
     * Check if the agreement type is whitelisted
     */
    isAgreementTypeListed(
      agreementType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Check if the agreement class is whitelisted
     */
    isAgreementClassListed(
      agreementClass: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * agreementType is the keccak256 hash of: "org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>"
     * Get agreement class
     */
    getAgreementClass(
      agreementType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Map list of the agreement classes using a bitmap
     * @param bitmap Agreement class bitmap
     */
    mapAgreementClasses(
      bitmap: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * agreementType is the keccak256 hash of: "org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>"
     * Create a new bitmask by adding a agreement class to it
     * @param bitmap Agreement class bitmap
     */
    addToAgreementClassesBitmap(
      bitmap: number | BN | string,
      agreementType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * agreementType is the keccak256 hash of: "org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>"
     * Create a new bitmask by removing a agreement class from it
     * @param bitmap Agreement class bitmap
     */
    removeFromAgreementClassesBitmap(
      bitmap: number | BN | string,
      agreementType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the super token factory
     */
    getSuperTokenFactory(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the super token factory logic (applicable to upgradable deployment)
     */
    getSuperTokenFactoryLogic(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Update super token factory
     * @param newFactory New factory logic
     */
    updateSuperTokenFactory: {
      (newFactory: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newFactory: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newFactory: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newFactory: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Refer to ISuperTokenFactory.Upgradability for expected behaviours
     * Update the super token logic to the latest
     */
    updateSuperTokenLogic: {
      (token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Message sender (must be a contract) declares itself as a super app.
     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`
     */
    registerApp: {
      (
        configWord: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        configWord: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        configWord: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        configWord: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Message sender declares itself as a super app.
     * See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for.
     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`
     * @param registrationKey The registration key issued by the governance, needed to register on a mainnet.
     */
    registerAppWithKey: {
      (
        configWord: number | BN | string,
        registrationKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        configWord: number | BN | string,
        registrationKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        configWord: number | BN | string,
        registrationKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        configWord: number | BN | string,
        registrationKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Message sender (must be a contract) declares app as a super app
     * On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide
     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`
     */
    registerAppByFactory: {
      (
        app: string,
        configWord: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        app: string,
        configWord: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        app: string,
        configWord: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        app: string,
        configWord: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Query if the app is registered
     * @param app Super app address
     */
    isApp(
      app: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Query app callbacklevel
     * @param app Super app address
     */
    getAppCallbackLevel(
      app: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Get the manifest of the super app
     * @param app Super app address
     */
    getAppManifest(
      app: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: boolean; 2: BN }>;

    /**
     * Query if the app has been jailed
     * @param app Super app address
     */
    isAppJailed(
      app: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Whitelist the target app for app composition for the source app (msg.sender)
     * @param targetApp The target super app address
     */
    allowCompositeApp: {
      (targetApp: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        targetApp: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        targetApp: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        targetApp: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Query if source app is allowed to call the target app as downstream app
     * @param app Super app address
     * @param targetApp The target super app address
     */
    isCompositeAppAllowed(
      app: string,
      targetApp: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * (For agreements) StaticCall the app before callback
     * @param app The super app.
     * @param callData The call data sending to the super app.
     * @param ctx Current ctx, it will be validated.
     * @param isTermination Is it a termination callback?
     */
    callAppBeforeCallback: {
      (
        app: string,
        callData: string,
        isTermination: boolean,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        app: string,
        callData: string,
        isTermination: boolean,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        app: string,
        callData: string,
        isTermination: boolean,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        app: string,
        callData: string,
        isTermination: boolean,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * (For agreements) Call the app after callback
     * @param app The super app.
     * @param callData The call data sending to the super app.
     * @param ctx Current ctx, it will be validated.
     * @param isTermination Is it a termination callback?
     */
    callAppAfterCallback: {
      (
        app: string,
        callData: string,
        isTermination: boolean,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        app: string,
        callData: string,
        isTermination: boolean,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        app: string,
        callData: string,
        isTermination: boolean,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        app: string,
        callData: string,
        isTermination: boolean,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * (For agreements) Create a new callback stack
     * @param app The super app.
     * @param appCreditGranted App credit granted so far.
     * @param appCreditUsed App credit used so far.
     * @param ctx The current ctx, it will be validated.
     */
    appCallbackPush: {
      (
        ctx: string,
        app: string,
        appCreditGranted: number | BN | string,
        appCreditUsed: number | BN | string,
        appCreditToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ctx: string,
        app: string,
        appCreditGranted: number | BN | string,
        appCreditUsed: number | BN | string,
        appCreditToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        ctx: string,
        app: string,
        appCreditGranted: number | BN | string,
        appCreditUsed: number | BN | string,
        appCreditToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ctx: string,
        app: string,
        appCreditGranted: number | BN | string,
        appCreditUsed: number | BN | string,
        appCreditToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * (For agreements) Pop from the current app callback stack
     * @param appCreditUsedDelta App credit used by the app.
     * @param ctx The ctx that was pushed before the callback stack.
     */
    appCallbackPop: {
      (
        ctx: string,
        appCreditUsedDelta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ctx: string,
        appCreditUsedDelta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        ctx: string,
        appCreditUsedDelta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ctx: string,
        appCreditUsedDelta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * (For agreements) Use app credit.
     * @param appCreditUsedMore See app credit for more details.
     * @param ctx The current ctx, it will be validated.
     */
    ctxUseCredit: {
      (
        ctx: string,
        appCreditUsedMore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ctx: string,
        appCreditUsedMore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        ctx: string,
        appCreditUsedMore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ctx: string,
        appCreditUsedMore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * (For agreements) Jail the app.
     * @param app The super app.
     * @param reason Jail reason code.
     */
    jailApp: {
      (
        ctx: string,
        app: string,
        reason: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ctx: string,
        app: string,
        reason: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        ctx: string,
        app: string,
        reason: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ctx: string,
        app: string,
        reason: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Call agreement function
     * @param agreementClass The agreement address you are calling
     * @param callData The contextual call data with placeholder ctx
     * @param userData Extra user data being sent to the super app callbacks
     */
    callAgreement: {
      (
        agreementClass: string,
        callData: string,
        userData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        agreementClass: string,
        callData: string,
        userData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        agreementClass: string,
        callData: string,
        userData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        agreementClass: string,
        callData: string,
        userData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Main use case is calling app action in a batch call via the host
     * Call app action
     * @param callData The contextual call data
     */
    callAppAction: {
      (
        app: string,
        callData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        app: string,
        callData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        app: string,
        callData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        app: string,
        callData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    callAgreementWithContext: {
      (
        agreementClass: string,
        callData: string,
        userData: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        agreementClass: string,
        callData: string,
        userData: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: string; 1: string }>;
      sendTransaction(
        agreementClass: string,
        callData: string,
        userData: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        agreementClass: string,
        callData: string,
        userData: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    callAppActionWithContext: {
      (
        app: string,
        callData: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        app: string,
        callData: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        app: string,
        callData: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        app: string,
        callData: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    decodeCtx(
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      appCallbackLevel: BN;
      callType: BN;
      timestamp: BN;
      msgSender: string;
      agreementSelector: string;
      userData: string;
      appCreditGranted: BN;
      appCreditWantedDeprecated: BN;
      appCreditUsed: BN;
      appAddress: string;
      appCreditToken: string;
    }>;

    isCtxValid(
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    batchCall: {
      (
        operations: {
          operationType: number | BN | string;
          target: string;
          data: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        operations: {
          operationType: number | BN | string;
          target: string;
          data: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        operations: {
          operationType: number | BN | string;
          target: string;
          data: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        operations: {
          operationType: number | BN | string;
          target: string;
          data: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    forwardBatchCall: {
      (
        operations: {
          operationType: number | BN | string;
          target: string;
          data: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        operations: {
          operationType: number | BN | string;
          target: string;
          data: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        operations: {
          operationType: number | BN | string;
          target: string;
          data: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        operations: {
          operationType: number | BN | string;
          target: string;
          data: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
