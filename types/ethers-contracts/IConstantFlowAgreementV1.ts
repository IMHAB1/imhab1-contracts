/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IConstantFlowAgreementV1Interface extends utils.Interface {
  functions: {
    "realtimeBalanceOf(address,address,uint256)": FunctionFragment;
    "agreementType()": FunctionFragment;
    "getMaximumFlowRateFromDeposit(address,uint256)": FunctionFragment;
    "getDepositRequiredForFlowRate(address,int96)": FunctionFragment;
    "isPatricianPeriodNow(address,address)": FunctionFragment;
    "isPatricianPeriod(address,address,uint256)": FunctionFragment;
    "updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": FunctionFragment;
    "authorizeFlowOperatorWithFullControl(address,address,bytes)": FunctionFragment;
    "revokeFlowOperatorWithFullControl(address,address,bytes)": FunctionFragment;
    "getFlowOperatorData(address,address,address)": FunctionFragment;
    "getFlowOperatorDataByID(address,bytes32)": FunctionFragment;
    "createFlow(address,address,int96,bytes)": FunctionFragment;
    "createFlowByOperator(address,address,address,int96,bytes)": FunctionFragment;
    "updateFlow(address,address,int96,bytes)": FunctionFragment;
    "updateFlowByOperator(address,address,address,int96,bytes)": FunctionFragment;
    "getFlow(address,address,address)": FunctionFragment;
    "getFlowByID(address,bytes32)": FunctionFragment;
    "getAccountFlowInfo(address,address)": FunctionFragment;
    "getNetFlow(address,address)": FunctionFragment;
    "deleteFlow(address,address,address,bytes)": FunctionFragment;
    "deleteFlowByOperator(address,address,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "realtimeBalanceOf"
      | "agreementType"
      | "getMaximumFlowRateFromDeposit"
      | "getDepositRequiredForFlowRate"
      | "isPatricianPeriodNow"
      | "isPatricianPeriod"
      | "updateFlowOperatorPermissions"
      | "authorizeFlowOperatorWithFullControl"
      | "revokeFlowOperatorWithFullControl"
      | "getFlowOperatorData"
      | "getFlowOperatorDataByID"
      | "createFlow"
      | "createFlowByOperator"
      | "updateFlow"
      | "updateFlowByOperator"
      | "getFlow"
      | "getFlowByID"
      | "getAccountFlowInfo"
      | "getNetFlow"
      | "deleteFlow"
      | "deleteFlowByOperator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "agreementType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumFlowRateFromDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositRequiredForFlowRate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatricianPeriodNow",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatricianPeriod",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlowOperatorPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeFlowOperatorWithFullControl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeFlowOperatorWithFullControl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowOperatorData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowOperatorDataByID",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFlow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createFlowByOperator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlowByOperator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlowByID",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountFlowInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetFlow",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFlow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFlowByOperator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumFlowRateFromDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositRequiredForFlowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPatricianPeriodNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPatricianPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlowOperatorPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeFlowOperatorWithFullControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeFlowOperatorWithFullControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlowOperatorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlowOperatorDataByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFlowByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFlowByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFlowByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFlowInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNetFlow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteFlowByOperator",
    data: BytesLike
  ): Result;

  events: {
    "FlowOperatorUpdated(address,address,address,uint8,int96)": EventFragment;
    "FlowUpdated(address,address,address,int96,int256,int256,bytes)": EventFragment;
    "FlowUpdatedExtension(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlowOperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlowUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlowUpdatedExtension"): EventFragment;
}

export interface FlowOperatorUpdatedEventObject {
  token: string;
  sender: string;
  flowOperator: string;
  permissions: number;
  flowRateAllowance: BigNumber;
}
export type FlowOperatorUpdatedEvent = TypedEvent<
  [string, string, string, number, BigNumber],
  FlowOperatorUpdatedEventObject
>;

export type FlowOperatorUpdatedEventFilter =
  TypedEventFilter<FlowOperatorUpdatedEvent>;

export interface FlowUpdatedEventObject {
  token: string;
  sender: string;
  receiver: string;
  flowRate: BigNumber;
  totalSenderFlowRate: BigNumber;
  totalReceiverFlowRate: BigNumber;
  userData: string;
}
export type FlowUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string],
  FlowUpdatedEventObject
>;

export type FlowUpdatedEventFilter = TypedEventFilter<FlowUpdatedEvent>;

export interface FlowUpdatedExtensionEventObject {
  flowOperator: string;
  deposit: BigNumber;
}
export type FlowUpdatedExtensionEvent = TypedEvent<
  [string, BigNumber],
  FlowUpdatedExtensionEventObject
>;

export type FlowUpdatedExtensionEventFilter =
  TypedEventFilter<FlowUpdatedExtensionEvent>;

export interface IConstantFlowAgreementV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConstantFlowAgreementV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dynamicBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The deposit is clipped and rounded down
     * Get the maximum flow rate allowed with the deposit
     * @param deposit Deposit amount used for creating the flow
     */
    getMaximumFlowRateFromDeposit(
      token: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { flowRate: BigNumber }>;

    /**
     * Calculates the deposit based on the liquidationPeriod and flowRate
     * Get the deposit required for creating the flow
     * @param flowRate Flow rate to be tested
     */
    getDepositRequiredForFlowRate(
      token: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deposit: BigNumber }>;

    /**
     * Returns whether it is the patrician period based on host.getNow()
     * @param account The account we are interested in
     */
    isPatricianPeriodNow(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isCurrentlyPatricianPeriod: boolean;
        timestamp: BigNumber;
      }
    >;

    /**
     * Returns whether it is the patrician period based on timestamp
     * @param account The account we are interested in
     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod
     */
    isPatricianPeriod(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)
     * @param permissions A bitmask representation of the granted permissions
     * @param token Super token address
     */
    updateFlowOperatorPermissions(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      flowRateAllowance: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    authorizeFlowOperatorWithFullControl(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * `permissions` and `flowRateAllowance` will both be set to 0
     * msgSender from `ctx` revokes `flowOperator` create/update/delete permissions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    revokeFlowOperatorWithFullControl(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the permissions of a flow operator between `sender` and `flowOperator` for `token`
     * @param flowOperator The permission grantee address
     * @param sender The permission granter address
     * @param token Super token address
     */
    getFlowOperatorData(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        flowOperatorId: string;
        permissions: number;
        flowRateAllowance: BigNumber;
      }
    >;

    /**
     * Get flow operator using flowOperatorId
     * @param flowOperatorId The keccak256 hash of encoded string "flowOperator", sender and flowOperator
     * @param token Super token address
     */
    getFlowOperatorDataByID(
      token: PromiseOrValue<string>,
      flowOperatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & {
        permissions: number;
        flowRateAllowance: BigNumber;
      }
    >;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Create a flow betwen ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    createFlow(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * A flow created by an approved flow operator (see above for details on callbacks)
     * Create a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    createFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Update the flow rate between ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    updateFlow(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * A flow updated by an approved flow operator (see above for details on callbacks)
     * Update a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    updateFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the flow data between `sender` and `receiver` of `token`
     * @param receiver Flow sender
     * @param sender Flow receiver
     * @param token Super token address
     */
    getFlow(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Get flow data using agreementId
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getFlowByID(
      token: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * Get the aggregated flow info of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getAccountFlowInfo(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * Get the net flow rate of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getNetFlow(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { flowRate: BigNumber }>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlow(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * A flow deleted by an approved flow operator (see above for details on callbacks)
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Calculate the real-time balance for the account of this agreement class
   * @param account Account the state belongs to
   * @param time Time used for the calculation
   */
  realtimeBalanceOf(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dynamicBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  /**
   * ISuperAgreement.agreementType implementation
   */
  agreementType(overrides?: CallOverrides): Promise<string>;

  /**
   * The deposit is clipped and rounded down
   * Get the maximum flow rate allowed with the deposit
   * @param deposit Deposit amount used for creating the flow
   */
  getMaximumFlowRateFromDeposit(
    token: PromiseOrValue<string>,
    deposit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Calculates the deposit based on the liquidationPeriod and flowRate
   * Get the deposit required for creating the flow
   * @param flowRate Flow rate to be tested
   */
  getDepositRequiredForFlowRate(
    token: PromiseOrValue<string>,
    flowRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns whether it is the patrician period based on host.getNow()
   * @param account The account we are interested in
   */
  isPatricianPeriodNow(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & {
      isCurrentlyPatricianPeriod: boolean;
      timestamp: BigNumber;
    }
  >;

  /**
   * Returns whether it is the patrician period based on timestamp
   * @param account The account we are interested in
   * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod
   */
  isPatricianPeriod(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowOperator The permission grantee address
   * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)
   * @param permissions A bitmask representation of the granted permissions
   * @param token Super token address
   */
  updateFlowOperatorPermissions(
    token: PromiseOrValue<string>,
    flowOperator: PromiseOrValue<string>,
    permissions: PromiseOrValue<BigNumberish>,
    flowRateAllowance: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowOperator The permission grantee address
   * @param token Super token address
   */
  authorizeFlowOperatorWithFullControl(
    token: PromiseOrValue<string>,
    flowOperator: PromiseOrValue<string>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * `permissions` and `flowRateAllowance` will both be set to 0
   * msgSender from `ctx` revokes `flowOperator` create/update/delete permissions
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowOperator The permission grantee address
   * @param token Super token address
   */
  revokeFlowOperatorWithFullControl(
    token: PromiseOrValue<string>,
    flowOperator: PromiseOrValue<string>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the permissions of a flow operator between `sender` and `flowOperator` for `token`
   * @param flowOperator The permission grantee address
   * @param sender The permission granter address
   * @param token Super token address
   */
  getFlowOperatorData(
    token: PromiseOrValue<string>,
    sender: PromiseOrValue<string>,
    flowOperator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      flowOperatorId: string;
      permissions: number;
      flowRateAllowance: BigNumber;
    }
  >;

  /**
   * Get flow operator using flowOperatorId
   * @param flowOperatorId The keccak256 hash of encoded string "flowOperator", sender and flowOperator
   * @param token Super token address
   */
  getFlowOperatorDataByID(
    token: PromiseOrValue<string>,
    flowOperatorId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & { permissions: number; flowRateAllowance: BigNumber }
  >;

  /**
   * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
   * Create a flow betwen ctx.msgSender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowRate New flow rate in amount per second
   * @param receiver Flow receiver address
   * @param token Super token address
   */
  createFlow(
    token: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    flowRate: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * A flow created by an approved flow operator (see above for details on callbacks)
   * Create a flow between sender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowRate New flow rate in amount per second
   * @param receiver Flow receiver address
   * @param sender Flow sender address (has granted permissions)
   * @param token Super token address
   */
  createFlowByOperator(
    token: PromiseOrValue<string>,
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    flowRate: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
   * Update the flow rate between ctx.msgSender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowRate New flow rate in amount per second
   * @param receiver Flow receiver address
   * @param token Super token address
   */
  updateFlow(
    token: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    flowRate: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * A flow updated by an approved flow operator (see above for details on callbacks)
   * Update a flow between sender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param flowRate New flow rate in amount per second
   * @param receiver Flow receiver address
   * @param sender Flow sender address (has granted permissions)
   * @param token Super token address
   */
  updateFlowByOperator(
    token: PromiseOrValue<string>,
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    flowRate: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the flow data between `sender` and `receiver` of `token`
   * @param receiver Flow sender
   * @param sender Flow receiver
   * @param token Super token address
   */
  getFlow(
    token: PromiseOrValue<string>,
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      flowRate: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  /**
   * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
   * Get flow data using agreementId
   * @param agreementId The agreement ID
   * @param token Super token address
   */
  getFlowByID(
    token: PromiseOrValue<string>,
    agreementId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      flowRate: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  /**
   * Get the aggregated flow info of the account
   * @param account Account for the query
   * @param token Super token address
   */
  getAccountFlowInfo(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      flowRate: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  /**
   * Get the net flow rate of the account
   * @param account Account for the query
   * @param token Super token address
   */
  getNetFlow(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
   * Delete the flow between sender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param receiver Flow receiver address
   * @param token Super token address
   */
  deleteFlow(
    token: PromiseOrValue<string>,
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * A flow deleted by an approved flow operator (see above for details on callbacks)
   * Delete the flow between sender and receiver
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param receiver Flow receiver address
   * @param token Super token address
   */
  deleteFlowByOperator(
    token: PromiseOrValue<string>,
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dynamicBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(overrides?: CallOverrides): Promise<string>;

    /**
     * The deposit is clipped and rounded down
     * Get the maximum flow rate allowed with the deposit
     * @param deposit Deposit amount used for creating the flow
     */
    getMaximumFlowRateFromDeposit(
      token: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculates the deposit based on the liquidationPeriod and flowRate
     * Get the deposit required for creating the flow
     * @param flowRate Flow rate to be tested
     */
    getDepositRequiredForFlowRate(
      token: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns whether it is the patrician period based on host.getNow()
     * @param account The account we are interested in
     */
    isPatricianPeriodNow(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isCurrentlyPatricianPeriod: boolean;
        timestamp: BigNumber;
      }
    >;

    /**
     * Returns whether it is the patrician period based on timestamp
     * @param account The account we are interested in
     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod
     */
    isPatricianPeriod(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)
     * @param permissions A bitmask representation of the granted permissions
     * @param token Super token address
     */
    updateFlowOperatorPermissions(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      flowRateAllowance: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    authorizeFlowOperatorWithFullControl(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * `permissions` and `flowRateAllowance` will both be set to 0
     * msgSender from `ctx` revokes `flowOperator` create/update/delete permissions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    revokeFlowOperatorWithFullControl(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Get the permissions of a flow operator between `sender` and `flowOperator` for `token`
     * @param flowOperator The permission grantee address
     * @param sender The permission granter address
     * @param token Super token address
     */
    getFlowOperatorData(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        flowOperatorId: string;
        permissions: number;
        flowRateAllowance: BigNumber;
      }
    >;

    /**
     * Get flow operator using flowOperatorId
     * @param flowOperatorId The keccak256 hash of encoded string "flowOperator", sender and flowOperator
     * @param token Super token address
     */
    getFlowOperatorDataByID(
      token: PromiseOrValue<string>,
      flowOperatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & {
        permissions: number;
        flowRateAllowance: BigNumber;
      }
    >;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Create a flow betwen ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    createFlow(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * A flow created by an approved flow operator (see above for details on callbacks)
     * Create a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    createFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Update the flow rate between ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    updateFlow(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * A flow updated by an approved flow operator (see above for details on callbacks)
     * Update a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    updateFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Get the flow data between `sender` and `receiver` of `token`
     * @param receiver Flow sender
     * @param sender Flow receiver
     * @param token Super token address
     */
    getFlow(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Get flow data using agreementId
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getFlowByID(
      token: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * Get the aggregated flow info of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getAccountFlowInfo(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        flowRate: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * Get the net flow rate of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getNetFlow(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlow(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * A flow deleted by an approved flow operator (see above for details on callbacks)
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "FlowOperatorUpdated(address,address,address,uint8,int96)"(
      token?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      flowOperator?: PromiseOrValue<string> | null,
      permissions?: null,
      flowRateAllowance?: null
    ): FlowOperatorUpdatedEventFilter;
    FlowOperatorUpdated(
      token?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      flowOperator?: PromiseOrValue<string> | null,
      permissions?: null,
      flowRateAllowance?: null
    ): FlowOperatorUpdatedEventFilter;

    "FlowUpdated(address,address,address,int96,int256,int256,bytes)"(
      token?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      flowRate?: null,
      totalSenderFlowRate?: null,
      totalReceiverFlowRate?: null,
      userData?: null
    ): FlowUpdatedEventFilter;
    FlowUpdated(
      token?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      flowRate?: null,
      totalSenderFlowRate?: null,
      totalReceiverFlowRate?: null,
      userData?: null
    ): FlowUpdatedEventFilter;

    "FlowUpdatedExtension(address,uint256)"(
      flowOperator?: PromiseOrValue<string> | null,
      deposit?: null
    ): FlowUpdatedExtensionEventFilter;
    FlowUpdatedExtension(
      flowOperator?: PromiseOrValue<string> | null,
      deposit?: null
    ): FlowUpdatedExtensionEventFilter;
  };

  estimateGas: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The deposit is clipped and rounded down
     * Get the maximum flow rate allowed with the deposit
     * @param deposit Deposit amount used for creating the flow
     */
    getMaximumFlowRateFromDeposit(
      token: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculates the deposit based on the liquidationPeriod and flowRate
     * Get the deposit required for creating the flow
     * @param flowRate Flow rate to be tested
     */
    getDepositRequiredForFlowRate(
      token: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns whether it is the patrician period based on host.getNow()
     * @param account The account we are interested in
     */
    isPatricianPeriodNow(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns whether it is the patrician period based on timestamp
     * @param account The account we are interested in
     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod
     */
    isPatricianPeriod(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)
     * @param permissions A bitmask representation of the granted permissions
     * @param token Super token address
     */
    updateFlowOperatorPermissions(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      flowRateAllowance: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    authorizeFlowOperatorWithFullControl(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * `permissions` and `flowRateAllowance` will both be set to 0
     * msgSender from `ctx` revokes `flowOperator` create/update/delete permissions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    revokeFlowOperatorWithFullControl(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the permissions of a flow operator between `sender` and `flowOperator` for `token`
     * @param flowOperator The permission grantee address
     * @param sender The permission granter address
     * @param token Super token address
     */
    getFlowOperatorData(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get flow operator using flowOperatorId
     * @param flowOperatorId The keccak256 hash of encoded string "flowOperator", sender and flowOperator
     * @param token Super token address
     */
    getFlowOperatorDataByID(
      token: PromiseOrValue<string>,
      flowOperatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Create a flow betwen ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    createFlow(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * A flow created by an approved flow operator (see above for details on callbacks)
     * Create a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    createFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Update the flow rate between ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    updateFlow(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * A flow updated by an approved flow operator (see above for details on callbacks)
     * Update a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    updateFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the flow data between `sender` and `receiver` of `token`
     * @param receiver Flow sender
     * @param sender Flow receiver
     * @param token Super token address
     */
    getFlow(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Get flow data using agreementId
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getFlowByID(
      token: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the aggregated flow info of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getAccountFlowInfo(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the net flow rate of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getNetFlow(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlow(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * A flow deleted by an approved flow operator (see above for details on callbacks)
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The deposit is clipped and rounded down
     * Get the maximum flow rate allowed with the deposit
     * @param deposit Deposit amount used for creating the flow
     */
    getMaximumFlowRateFromDeposit(
      token: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Calculates the deposit based on the liquidationPeriod and flowRate
     * Get the deposit required for creating the flow
     * @param flowRate Flow rate to be tested
     */
    getDepositRequiredForFlowRate(
      token: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns whether it is the patrician period based on host.getNow()
     * @param account The account we are interested in
     */
    isPatricianPeriodNow(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns whether it is the patrician period based on timestamp
     * @param account The account we are interested in
     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod
     */
    isPatricianPeriod(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)
     * @param permissions A bitmask representation of the granted permissions
     * @param token Super token address
     */
    updateFlowOperatorPermissions(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      permissions: PromiseOrValue<BigNumberish>,
      flowRateAllowance: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    authorizeFlowOperatorWithFullControl(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * `permissions` and `flowRateAllowance` will both be set to 0
     * msgSender from `ctx` revokes `flowOperator` create/update/delete permissions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowOperator The permission grantee address
     * @param token Super token address
     */
    revokeFlowOperatorWithFullControl(
      token: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the permissions of a flow operator between `sender` and `flowOperator` for `token`
     * @param flowOperator The permission grantee address
     * @param sender The permission granter address
     * @param token Super token address
     */
    getFlowOperatorData(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      flowOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get flow operator using flowOperatorId
     * @param flowOperatorId The keccak256 hash of encoded string "flowOperator", sender and flowOperator
     * @param token Super token address
     */
    getFlowOperatorDataByID(
      token: PromiseOrValue<string>,
      flowOperatorId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Create a flow betwen ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    createFlow(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * A flow created by an approved flow operator (see above for details on callbacks)
     * Create a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    createFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Update the flow rate between ctx.msgSender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    updateFlow(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * A flow updated by an approved flow operator (see above for details on callbacks)
     * Update a flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param flowRate New flow rate in amount per second
     * @param receiver Flow receiver address
     * @param sender Flow sender address (has granted permissions)
     * @param token Super token address
     */
    updateFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      flowRate: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the flow data between `sender` and `receiver` of `token`
     * @param receiver Flow sender
     * @param sender Flow receiver
     * @param token Super token address
     */
    getFlow(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Get flow data using agreementId
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getFlowByID(
      token: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the aggregated flow info of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getAccountFlowInfo(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the net flow rate of the account
     * @param account Account for the query
     * @param token Super token address
     */
    getNetFlow(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * flowId (agreementId) is the keccak256 hash of encoded sender and receiver
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlow(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * A flow deleted by an approved flow operator (see above for details on callbacks)
     * Delete the flow between sender and receiver
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param receiver Flow receiver address
     * @param token Super token address
     */
    deleteFlowByOperator(
      token: PromiseOrValue<string>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
