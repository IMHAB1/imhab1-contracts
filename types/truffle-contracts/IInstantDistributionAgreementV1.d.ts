/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IInstantDistributionAgreementV1Contract
  extends Truffle.Contract<IInstantDistributionAgreementV1Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IInstantDistributionAgreementV1Instance>;
}

export interface IndexCreated {
  name: "IndexCreated";
  args: {
    token: string;
    publisher: string;
    indexId: BN;
    userData: string;
    0: string;
    1: string;
    2: BN;
    3: string;
  };
}

export interface IndexDistributionClaimed {
  name: "IndexDistributionClaimed";
  args: {
    token: string;
    publisher: string;
    indexId: BN;
    subscriber: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
  };
}

export interface IndexSubscribed {
  name: "IndexSubscribed";
  args: {
    token: string;
    publisher: string;
    indexId: BN;
    subscriber: string;
    userData: string;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: string;
  };
}

export interface IndexUnitsUpdated {
  name: "IndexUnitsUpdated";
  args: {
    token: string;
    publisher: string;
    indexId: BN;
    subscriber: string;
    units: BN;
    userData: string;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
    5: string;
  };
}

export interface IndexUnsubscribed {
  name: "IndexUnsubscribed";
  args: {
    token: string;
    publisher: string;
    indexId: BN;
    subscriber: string;
    userData: string;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: string;
  };
}

export interface IndexUpdated {
  name: "IndexUpdated";
  args: {
    token: string;
    publisher: string;
    indexId: BN;
    oldIndexValue: BN;
    newIndexValue: BN;
    totalUnitsPending: BN;
    totalUnitsApproved: BN;
    userData: string;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: string;
  };
}

export interface SubscriptionApproved {
  name: "SubscriptionApproved";
  args: {
    token: string;
    subscriber: string;
    publisher: string;
    indexId: BN;
    userData: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: string;
  };
}

export interface SubscriptionDistributionClaimed {
  name: "SubscriptionDistributionClaimed";
  args: {
    token: string;
    subscriber: string;
    publisher: string;
    indexId: BN;
    amount: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface SubscriptionRevoked {
  name: "SubscriptionRevoked";
  args: {
    token: string;
    subscriber: string;
    publisher: string;
    indexId: BN;
    userData: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: string;
  };
}

export interface SubscriptionUnitsUpdated {
  name: "SubscriptionUnitsUpdated";
  args: {
    token: string;
    subscriber: string;
    publisher: string;
    indexId: BN;
    units: BN;
    userData: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
  };
}

type AllEvents =
  | IndexCreated
  | IndexDistributionClaimed
  | IndexSubscribed
  | IndexUnitsUpdated
  | IndexUnsubscribed
  | IndexUpdated
  | SubscriptionApproved
  | SubscriptionDistributionClaimed
  | SubscriptionRevoked
  | SubscriptionUnitsUpdated;

export interface IInstantDistributionAgreementV1Instance
  extends Truffle.ContractInstance {
  /**
   * Calculate the real-time balance for the account of this agreement class
   * @param account Account the state belongs to
   * @param time Time used for the calculation
   */
  realtimeBalanceOf(
    token: string,
    account: string,
    time: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  /**
   * ISuperAgreement.agreementType implementation
   */
  agreementType(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Create a new index for the publisher
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param token Super token address
   */
  createIndex: {
    (
      token: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Query the data of a index
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param token Super token address
   */
  getIndex(
    token: string,
    publisher: string,
    indexId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: BN; 2: BN; 3: BN }>;

  /**
   * Calculate actual distribution amount
   * @param amount The amount of tokens desired to be distributed
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param token Super token address
   */
  calculateDistribution(
    token: string,
    publisher: string,
    indexId: number | BN | string,
    amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  /**
   * Update index value of an index
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param indexValue Value of the index
   * @param token Super token address
   */
  updateIndex: {
    (
      token: string,
      indexId: number | BN | string,
      indexValue: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      indexId: number | BN | string,
      indexValue: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      indexId: number | BN | string,
      indexValue: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      indexId: number | BN | string,
      indexValue: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Distribute tokens through the index
   * @param amount The amount of tokens desired to be distributed
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param token Super token address
   */
  distribute: {
    (
      token: string,
      indexId: number | BN | string,
      amount: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      indexId: number | BN | string,
      amount: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      indexId: number | BN | string,
      amount: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      indexId: number | BN | string,
      amount: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Approve the subscription of an index
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param token Super token address
   */
  approveSubscription: {
    (
      token: string,
      publisher: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * "Unapproves" the subscription and moves approved units to pending
   * Revoke the subscription of an index
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param token Super token address
   */
  revokeSubscription: {
    (
      token: string,
      publisher: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Update the nuber of units of a subscription
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param subscriber The subscriber of the index
   * @param token Super token address
   * @param units Number of units of the subscription
   */
  updateSubscription: {
    (
      token: string,
      indexId: number | BN | string,
      subscriber: string,
      units: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      indexId: number | BN | string,
      subscriber: string,
      units: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      indexId: number | BN | string,
      subscriber: string,
      units: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      indexId: number | BN | string,
      subscriber: string,
      units: number | BN | string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get data of a subscription
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param subscriber The subscriber of the index
   * @param token Super token address
   */
  getSubscription(
    token: string,
    publisher: string,
    indexId: number | BN | string,
    subscriber: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: boolean; 2: BN; 3: BN }>;

  /**
   * indexId (agreementId) is the keccak256 hash of encodePacked("publisher", publisher, indexId)
   * Get data of a subscription by agreement ID
   * @param agreementId The agreement ID
   * @param token Super token address
   */
  getSubscriptionByID(
    token: string,
    agreementId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: boolean; 3: BN; 4: BN }>;

  /**
   * List subscriptions of an user
   * @param subscriber The subscriber's address
   * @param token Super token address
   */
  listSubscriptions(
    token: string,
    subscriber: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[]; 2: BN[] }>;

  /**
   * Delete the subscription of an user
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param subscriber The subscriber's address
   * @param token Super token address
   */
  deleteSubscription: {
    (
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Claim pending distributions
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param subscriber The subscriber's address
   * @param token Super token address
   */
  claim: {
    (
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: string,
      account: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Create a new index for the publisher
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    createIndex: {
      (
        token: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Query the data of a index
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    getIndex(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: BN; 2: BN; 3: BN }>;

    /**
     * Calculate actual distribution amount
     * @param amount The amount of tokens desired to be distributed
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    calculateDistribution(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    /**
     * Update index value of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param indexValue Value of the index
     * @param token Super token address
     */
    updateIndex: {
      (
        token: string,
        indexId: number | BN | string,
        indexValue: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        indexId: number | BN | string,
        indexValue: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        indexId: number | BN | string,
        indexValue: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        indexId: number | BN | string,
        indexValue: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Distribute tokens through the index
     * @param amount The amount of tokens desired to be distributed
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    distribute: {
      (
        token: string,
        indexId: number | BN | string,
        amount: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        indexId: number | BN | string,
        amount: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        indexId: number | BN | string,
        amount: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        indexId: number | BN | string,
        amount: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Approve the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    approveSubscription: {
      (
        token: string,
        publisher: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * "Unapproves" the subscription and moves approved units to pending
     * Revoke the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    revokeSubscription: {
      (
        token: string,
        publisher: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Update the nuber of units of a subscription
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     * @param units Number of units of the subscription
     */
    updateSubscription: {
      (
        token: string,
        indexId: number | BN | string,
        subscriber: string,
        units: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        indexId: number | BN | string,
        subscriber: string,
        units: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        indexId: number | BN | string,
        subscriber: string,
        units: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        indexId: number | BN | string,
        subscriber: string,
        units: number | BN | string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get data of a subscription
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     */
    getSubscription(
      token: string,
      publisher: string,
      indexId: number | BN | string,
      subscriber: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: boolean; 2: BN; 3: BN }>;

    /**
     * indexId (agreementId) is the keccak256 hash of encodePacked("publisher", publisher, indexId)
     * Get data of a subscription by agreement ID
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getSubscriptionByID(
      token: string,
      agreementId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: boolean; 3: BN; 4: BN }>;

    /**
     * List subscriptions of an user
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    listSubscriptions(
      token: string,
      subscriber: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[]; 2: BN[] }>;

    /**
     * Delete the subscription of an user
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    deleteSubscription: {
      (
        token: string,
        publisher: string,
        indexId: number | BN | string,
        subscriber: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        subscriber: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        subscriber: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        subscriber: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Claim pending distributions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    claim: {
      (
        token: string,
        publisher: string,
        indexId: number | BN | string,
        subscriber: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        subscriber: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        subscriber: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        publisher: string,
        indexId: number | BN | string,
        subscriber: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
