/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IInstantDistributionAgreementV1Interface
  extends utils.Interface {
  functions: {
    "realtimeBalanceOf(address,address,uint256)": FunctionFragment;
    "agreementType()": FunctionFragment;
    "createIndex(address,uint32,bytes)": FunctionFragment;
    "getIndex(address,address,uint32)": FunctionFragment;
    "calculateDistribution(address,address,uint32,uint256)": FunctionFragment;
    "updateIndex(address,uint32,uint128,bytes)": FunctionFragment;
    "distribute(address,uint32,uint256,bytes)": FunctionFragment;
    "approveSubscription(address,address,uint32,bytes)": FunctionFragment;
    "revokeSubscription(address,address,uint32,bytes)": FunctionFragment;
    "updateSubscription(address,uint32,address,uint128,bytes)": FunctionFragment;
    "getSubscription(address,address,uint32,address)": FunctionFragment;
    "getSubscriptionByID(address,bytes32)": FunctionFragment;
    "listSubscriptions(address,address)": FunctionFragment;
    "deleteSubscription(address,address,uint32,address,bytes)": FunctionFragment;
    "claim(address,address,uint32,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "realtimeBalanceOf"
      | "agreementType"
      | "createIndex"
      | "getIndex"
      | "calculateDistribution"
      | "updateIndex"
      | "distribute"
      | "approveSubscription"
      | "revokeSubscription"
      | "updateSubscription"
      | "getSubscription"
      | "getSubscriptionByID"
      | "listSubscriptions"
      | "deleteSubscription"
      | "claim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "agreementType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createIndex",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndex",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDistribution",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIndex",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionByID",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "listSubscriptions",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSubscription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;

  events: {
    "IndexCreated(address,address,uint32,bytes)": EventFragment;
    "IndexDistributionClaimed(address,address,uint32,address,uint256)": EventFragment;
    "IndexSubscribed(address,address,uint32,address,bytes)": EventFragment;
    "IndexUnitsUpdated(address,address,uint32,address,uint128,bytes)": EventFragment;
    "IndexUnsubscribed(address,address,uint32,address,bytes)": EventFragment;
    "IndexUpdated(address,address,uint32,uint128,uint128,uint128,uint128,bytes)": EventFragment;
    "SubscriptionApproved(address,address,address,uint32,bytes)": EventFragment;
    "SubscriptionDistributionClaimed(address,address,address,uint32,uint256)": EventFragment;
    "SubscriptionRevoked(address,address,address,uint32,bytes)": EventFragment;
    "SubscriptionUnitsUpdated(address,address,address,uint32,uint128,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IndexCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexDistributionClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexSubscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexUnitsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexUnsubscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionApproved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubscriptionDistributionClaimed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionUnitsUpdated"): EventFragment;
}

export interface IndexCreatedEventObject {
  token: string;
  publisher: string;
  indexId: number;
  userData: string;
}
export type IndexCreatedEvent = TypedEvent<
  [string, string, number, string],
  IndexCreatedEventObject
>;

export type IndexCreatedEventFilter = TypedEventFilter<IndexCreatedEvent>;

export interface IndexDistributionClaimedEventObject {
  token: string;
  publisher: string;
  indexId: number;
  subscriber: string;
  amount: BigNumber;
}
export type IndexDistributionClaimedEvent = TypedEvent<
  [string, string, number, string, BigNumber],
  IndexDistributionClaimedEventObject
>;

export type IndexDistributionClaimedEventFilter =
  TypedEventFilter<IndexDistributionClaimedEvent>;

export interface IndexSubscribedEventObject {
  token: string;
  publisher: string;
  indexId: number;
  subscriber: string;
  userData: string;
}
export type IndexSubscribedEvent = TypedEvent<
  [string, string, number, string, string],
  IndexSubscribedEventObject
>;

export type IndexSubscribedEventFilter = TypedEventFilter<IndexSubscribedEvent>;

export interface IndexUnitsUpdatedEventObject {
  token: string;
  publisher: string;
  indexId: number;
  subscriber: string;
  units: BigNumber;
  userData: string;
}
export type IndexUnitsUpdatedEvent = TypedEvent<
  [string, string, number, string, BigNumber, string],
  IndexUnitsUpdatedEventObject
>;

export type IndexUnitsUpdatedEventFilter =
  TypedEventFilter<IndexUnitsUpdatedEvent>;

export interface IndexUnsubscribedEventObject {
  token: string;
  publisher: string;
  indexId: number;
  subscriber: string;
  userData: string;
}
export type IndexUnsubscribedEvent = TypedEvent<
  [string, string, number, string, string],
  IndexUnsubscribedEventObject
>;

export type IndexUnsubscribedEventFilter =
  TypedEventFilter<IndexUnsubscribedEvent>;

export interface IndexUpdatedEventObject {
  token: string;
  publisher: string;
  indexId: number;
  oldIndexValue: BigNumber;
  newIndexValue: BigNumber;
  totalUnitsPending: BigNumber;
  totalUnitsApproved: BigNumber;
  userData: string;
}
export type IndexUpdatedEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber, BigNumber, BigNumber, string],
  IndexUpdatedEventObject
>;

export type IndexUpdatedEventFilter = TypedEventFilter<IndexUpdatedEvent>;

export interface SubscriptionApprovedEventObject {
  token: string;
  subscriber: string;
  publisher: string;
  indexId: number;
  userData: string;
}
export type SubscriptionApprovedEvent = TypedEvent<
  [string, string, string, number, string],
  SubscriptionApprovedEventObject
>;

export type SubscriptionApprovedEventFilter =
  TypedEventFilter<SubscriptionApprovedEvent>;

export interface SubscriptionDistributionClaimedEventObject {
  token: string;
  subscriber: string;
  publisher: string;
  indexId: number;
  amount: BigNumber;
}
export type SubscriptionDistributionClaimedEvent = TypedEvent<
  [string, string, string, number, BigNumber],
  SubscriptionDistributionClaimedEventObject
>;

export type SubscriptionDistributionClaimedEventFilter =
  TypedEventFilter<SubscriptionDistributionClaimedEvent>;

export interface SubscriptionRevokedEventObject {
  token: string;
  subscriber: string;
  publisher: string;
  indexId: number;
  userData: string;
}
export type SubscriptionRevokedEvent = TypedEvent<
  [string, string, string, number, string],
  SubscriptionRevokedEventObject
>;

export type SubscriptionRevokedEventFilter =
  TypedEventFilter<SubscriptionRevokedEvent>;

export interface SubscriptionUnitsUpdatedEventObject {
  token: string;
  subscriber: string;
  publisher: string;
  indexId: number;
  units: BigNumber;
  userData: string;
}
export type SubscriptionUnitsUpdatedEvent = TypedEvent<
  [string, string, string, number, BigNumber, string],
  SubscriptionUnitsUpdatedEventObject
>;

export type SubscriptionUnitsUpdatedEventFilter =
  TypedEventFilter<SubscriptionUnitsUpdatedEvent>;

export interface IInstantDistributionAgreementV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInstantDistributionAgreementV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dynamicBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Create a new index for the publisher
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    createIndex(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Query the data of a index
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    getIndex(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        indexValue: BigNumber;
        totalUnitsApproved: BigNumber;
        totalUnitsPending: BigNumber;
      }
    >;

    /**
     * Calculate actual distribution amount
     * @param amount The amount of tokens desired to be distributed
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    calculateDistribution(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        actualAmount: BigNumber;
        newIndexValue: BigNumber;
      }
    >;

    /**
     * Update index value of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param indexValue Value of the index
     * @param token Super token address
     */
    updateIndex(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      indexValue: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Distribute tokens through the index
     * @param amount The amount of tokens desired to be distributed
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    distribute(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Approve the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    approveSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * "Unapproves" the subscription and moves approved units to pending
     * Revoke the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    revokeSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update the nuber of units of a subscription
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     * @param units Number of units of the subscription
     */
    updateSubscription(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      units: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get data of a subscription
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     */
    getSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        exist: boolean;
        approved: boolean;
        units: BigNumber;
        pendingDistribution: BigNumber;
      }
    >;

    /**
     * indexId (agreementId) is the keccak256 hash of encodePacked("publisher", publisher, indexId)
     * Get data of a subscription by agreement ID
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getSubscriptionByID(
      token: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, BigNumber, BigNumber] & {
        publisher: string;
        indexId: number;
        approved: boolean;
        units: BigNumber;
        pendingDistribution: BigNumber;
      }
    >;

    /**
     * List subscriptions of an user
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    listSubscriptions(
      token: PromiseOrValue<string>,
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[], BigNumber[]] & {
        publishers: string[];
        indexIds: number[];
        unitsList: BigNumber[];
      }
    >;

    /**
     * Delete the subscription of an user
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    deleteSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Claim pending distributions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    claim(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Calculate the real-time balance for the account of this agreement class
   * @param account Account the state belongs to
   * @param time Time used for the calculation
   */
  realtimeBalanceOf(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dynamicBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  /**
   * ISuperAgreement.agreementType implementation
   */
  agreementType(overrides?: CallOverrides): Promise<string>;

  /**
   * Create a new index for the publisher
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param token Super token address
   */
  createIndex(
    token: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Query the data of a index
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param token Super token address
   */
  getIndex(
    token: PromiseOrValue<string>,
    publisher: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      exist: boolean;
      indexValue: BigNumber;
      totalUnitsApproved: BigNumber;
      totalUnitsPending: BigNumber;
    }
  >;

  /**
   * Calculate actual distribution amount
   * @param amount The amount of tokens desired to be distributed
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param token Super token address
   */
  calculateDistribution(
    token: PromiseOrValue<string>,
    publisher: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      actualAmount: BigNumber;
      newIndexValue: BigNumber;
    }
  >;

  /**
   * Update index value of an index
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param indexValue Value of the index
   * @param token Super token address
   */
  updateIndex(
    token: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    indexValue: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Distribute tokens through the index
   * @param amount The amount of tokens desired to be distributed
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param token Super token address
   */
  distribute(
    token: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Approve the subscription of an index
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param token Super token address
   */
  approveSubscription(
    token: PromiseOrValue<string>,
    publisher: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * "Unapproves" the subscription and moves approved units to pending
   * Revoke the subscription of an index
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param token Super token address
   */
  revokeSubscription(
    token: PromiseOrValue<string>,
    publisher: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update the nuber of units of a subscription
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param subscriber The subscriber of the index
   * @param token Super token address
   * @param units Number of units of the subscription
   */
  updateSubscription(
    token: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    subscriber: PromiseOrValue<string>,
    units: PromiseOrValue<BigNumberish>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get data of a subscription
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param subscriber The subscriber of the index
   * @param token Super token address
   */
  getSubscription(
    token: PromiseOrValue<string>,
    publisher: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    subscriber: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber] & {
      exist: boolean;
      approved: boolean;
      units: BigNumber;
      pendingDistribution: BigNumber;
    }
  >;

  /**
   * indexId (agreementId) is the keccak256 hash of encodePacked("publisher", publisher, indexId)
   * Get data of a subscription by agreement ID
   * @param agreementId The agreement ID
   * @param token Super token address
   */
  getSubscriptionByID(
    token: PromiseOrValue<string>,
    agreementId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean, BigNumber, BigNumber] & {
      publisher: string;
      indexId: number;
      approved: boolean;
      units: BigNumber;
      pendingDistribution: BigNumber;
    }
  >;

  /**
   * List subscriptions of an user
   * @param subscriber The subscriber's address
   * @param token Super token address
   */
  listSubscriptions(
    token: PromiseOrValue<string>,
    subscriber: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], number[], BigNumber[]] & {
      publishers: string[];
      indexIds: number[];
      unitsList: BigNumber[];
    }
  >;

  /**
   * Delete the subscription of an user
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param subscriber The subscriber's address
   * @param token Super token address
   */
  deleteSubscription(
    token: PromiseOrValue<string>,
    publisher: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    subscriber: PromiseOrValue<string>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Claim pending distributions
   * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
   * @param indexId Id of the index
   * @param publisher The publisher of the index
   * @param subscriber The subscriber's address
   * @param token Super token address
   */
  claim(
    token: PromiseOrValue<string>,
    publisher: PromiseOrValue<string>,
    indexId: PromiseOrValue<BigNumberish>,
    subscriber: PromiseOrValue<string>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dynamicBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(overrides?: CallOverrides): Promise<string>;

    /**
     * Create a new index for the publisher
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    createIndex(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Query the data of a index
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    getIndex(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        indexValue: BigNumber;
        totalUnitsApproved: BigNumber;
        totalUnitsPending: BigNumber;
      }
    >;

    /**
     * Calculate actual distribution amount
     * @param amount The amount of tokens desired to be distributed
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    calculateDistribution(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        actualAmount: BigNumber;
        newIndexValue: BigNumber;
      }
    >;

    /**
     * Update index value of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param indexValue Value of the index
     * @param token Super token address
     */
    updateIndex(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      indexValue: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Distribute tokens through the index
     * @param amount The amount of tokens desired to be distributed
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    distribute(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Approve the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    approveSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * "Unapproves" the subscription and moves approved units to pending
     * Revoke the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    revokeSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Update the nuber of units of a subscription
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     * @param units Number of units of the subscription
     */
    updateSubscription(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      units: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Get data of a subscription
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     */
    getSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        exist: boolean;
        approved: boolean;
        units: BigNumber;
        pendingDistribution: BigNumber;
      }
    >;

    /**
     * indexId (agreementId) is the keccak256 hash of encodePacked("publisher", publisher, indexId)
     * Get data of a subscription by agreement ID
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getSubscriptionByID(
      token: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, BigNumber, BigNumber] & {
        publisher: string;
        indexId: number;
        approved: boolean;
        units: BigNumber;
        pendingDistribution: BigNumber;
      }
    >;

    /**
     * List subscriptions of an user
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    listSubscriptions(
      token: PromiseOrValue<string>,
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[], BigNumber[]] & {
        publishers: string[];
        indexIds: number[];
        unitsList: BigNumber[];
      }
    >;

    /**
     * Delete the subscription of an user
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    deleteSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Claim pending distributions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    claim(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "IndexCreated(address,address,uint32,bytes)"(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      userData?: null
    ): IndexCreatedEventFilter;
    IndexCreated(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      userData?: null
    ): IndexCreatedEventFilter;

    "IndexDistributionClaimed(address,address,uint32,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      subscriber?: null,
      amount?: null
    ): IndexDistributionClaimedEventFilter;
    IndexDistributionClaimed(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      subscriber?: null,
      amount?: null
    ): IndexDistributionClaimedEventFilter;

    "IndexSubscribed(address,address,uint32,address,bytes)"(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      subscriber?: null,
      userData?: null
    ): IndexSubscribedEventFilter;
    IndexSubscribed(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      subscriber?: null,
      userData?: null
    ): IndexSubscribedEventFilter;

    "IndexUnitsUpdated(address,address,uint32,address,uint128,bytes)"(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      subscriber?: null,
      units?: null,
      userData?: null
    ): IndexUnitsUpdatedEventFilter;
    IndexUnitsUpdated(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      subscriber?: null,
      units?: null,
      userData?: null
    ): IndexUnitsUpdatedEventFilter;

    "IndexUnsubscribed(address,address,uint32,address,bytes)"(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      subscriber?: null,
      userData?: null
    ): IndexUnsubscribedEventFilter;
    IndexUnsubscribed(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      subscriber?: null,
      userData?: null
    ): IndexUnsubscribedEventFilter;

    "IndexUpdated(address,address,uint32,uint128,uint128,uint128,uint128,bytes)"(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      oldIndexValue?: null,
      newIndexValue?: null,
      totalUnitsPending?: null,
      totalUnitsApproved?: null,
      userData?: null
    ): IndexUpdatedEventFilter;
    IndexUpdated(
      token?: PromiseOrValue<string> | null,
      publisher?: PromiseOrValue<string> | null,
      indexId?: PromiseOrValue<BigNumberish> | null,
      oldIndexValue?: null,
      newIndexValue?: null,
      totalUnitsPending?: null,
      totalUnitsApproved?: null,
      userData?: null
    ): IndexUpdatedEventFilter;

    "SubscriptionApproved(address,address,address,uint32,bytes)"(
      token?: PromiseOrValue<string> | null,
      subscriber?: PromiseOrValue<string> | null,
      publisher?: null,
      indexId?: null,
      userData?: null
    ): SubscriptionApprovedEventFilter;
    SubscriptionApproved(
      token?: PromiseOrValue<string> | null,
      subscriber?: PromiseOrValue<string> | null,
      publisher?: null,
      indexId?: null,
      userData?: null
    ): SubscriptionApprovedEventFilter;

    "SubscriptionDistributionClaimed(address,address,address,uint32,uint256)"(
      token?: PromiseOrValue<string> | null,
      subscriber?: PromiseOrValue<string> | null,
      publisher?: null,
      indexId?: null,
      amount?: null
    ): SubscriptionDistributionClaimedEventFilter;
    SubscriptionDistributionClaimed(
      token?: PromiseOrValue<string> | null,
      subscriber?: PromiseOrValue<string> | null,
      publisher?: null,
      indexId?: null,
      amount?: null
    ): SubscriptionDistributionClaimedEventFilter;

    "SubscriptionRevoked(address,address,address,uint32,bytes)"(
      token?: PromiseOrValue<string> | null,
      subscriber?: PromiseOrValue<string> | null,
      publisher?: null,
      indexId?: null,
      userData?: null
    ): SubscriptionRevokedEventFilter;
    SubscriptionRevoked(
      token?: PromiseOrValue<string> | null,
      subscriber?: PromiseOrValue<string> | null,
      publisher?: null,
      indexId?: null,
      userData?: null
    ): SubscriptionRevokedEventFilter;

    "SubscriptionUnitsUpdated(address,address,address,uint32,uint128,bytes)"(
      token?: PromiseOrValue<string> | null,
      subscriber?: PromiseOrValue<string> | null,
      publisher?: null,
      indexId?: null,
      units?: null,
      userData?: null
    ): SubscriptionUnitsUpdatedEventFilter;
    SubscriptionUnitsUpdated(
      token?: PromiseOrValue<string> | null,
      subscriber?: PromiseOrValue<string> | null,
      publisher?: null,
      indexId?: null,
      units?: null,
      userData?: null
    ): SubscriptionUnitsUpdatedEventFilter;
  };

  estimateGas: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Create a new index for the publisher
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    createIndex(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Query the data of a index
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    getIndex(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculate actual distribution amount
     * @param amount The amount of tokens desired to be distributed
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    calculateDistribution(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Update index value of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param indexValue Value of the index
     * @param token Super token address
     */
    updateIndex(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      indexValue: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Distribute tokens through the index
     * @param amount The amount of tokens desired to be distributed
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    distribute(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Approve the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    approveSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * "Unapproves" the subscription and moves approved units to pending
     * Revoke the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    revokeSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update the nuber of units of a subscription
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     * @param units Number of units of the subscription
     */
    updateSubscription(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      units: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get data of a subscription
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     */
    getSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * indexId (agreementId) is the keccak256 hash of encodePacked("publisher", publisher, indexId)
     * Get data of a subscription by agreement ID
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getSubscriptionByID(
      token: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * List subscriptions of an user
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    listSubscriptions(
      token: PromiseOrValue<string>,
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Delete the subscription of an user
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    deleteSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Claim pending distributions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    claim(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Calculate the real-time balance for the account of this agreement class
     * @param account Account the state belongs to
     * @param time Time used for the calculation
     */
    realtimeBalanceOf(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * ISuperAgreement.agreementType implementation
     */
    agreementType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Create a new index for the publisher
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    createIndex(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Query the data of a index
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    getIndex(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Calculate actual distribution amount
     * @param amount The amount of tokens desired to be distributed
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    calculateDistribution(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Update index value of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param indexValue Value of the index
     * @param token Super token address
     */
    updateIndex(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      indexValue: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Distribute tokens through the index
     * @param amount The amount of tokens desired to be distributed
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param token Super token address
     */
    distribute(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Approve the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    approveSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * "Unapproves" the subscription and moves approved units to pending
     * Revoke the subscription of an index
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param token Super token address
     */
    revokeSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update the nuber of units of a subscription
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     * @param units Number of units of the subscription
     */
    updateSubscription(
      token: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      units: PromiseOrValue<BigNumberish>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get data of a subscription
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber of the index
     * @param token Super token address
     */
    getSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * indexId (agreementId) is the keccak256 hash of encodePacked("publisher", publisher, indexId)
     * Get data of a subscription by agreement ID
     * @param agreementId The agreement ID
     * @param token Super token address
     */
    getSubscriptionByID(
      token: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * List subscriptions of an user
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    listSubscriptions(
      token: PromiseOrValue<string>,
      subscriber: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Delete the subscription of an user
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    deleteSubscription(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Claim pending distributions
     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)
     * @param indexId Id of the index
     * @param publisher The publisher of the index
     * @param subscriber The subscriber's address
     * @param token Super token address
     */
    claim(
      token: PromiseOrValue<string>,
      publisher: PromiseOrValue<string>,
      indexId: PromiseOrValue<BigNumberish>,
      subscriber: PromiseOrValue<string>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
