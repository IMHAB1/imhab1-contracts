/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISuperAppContract extends Truffle.Contract<ISuperAppInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISuperAppInstance>;
}

type AllEvents = never;

export interface ISuperAppInstance extends Truffle.ContractInstance {
  /**
   * Callback before a new agreement is created.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  beforeAgreementCreated(
    superToken: string,
    agreementClass: string,
    agreementId: string,
    agreementData: string,
    ctx: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Callback after a new agreement is created.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param cbdata The data returned from the before-hook callback.
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  afterAgreementCreated: {
    (
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Callback before a new agreement is updated.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  beforeAgreementUpdated(
    superToken: string,
    agreementClass: string,
    agreementId: string,
    agreementData: string,
    ctx: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Callback after a new agreement is updated.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param cbdata The data returned from the before-hook callback.
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  afterAgreementUpdated: {
    (
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Callback before a new agreement is terminated.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  beforeAgreementTerminated(
    superToken: string,
    agreementClass: string,
    agreementId: string,
    agreementData: string,
    ctx: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Callback after a new agreement is terminated.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param cbdata The data returned from the before-hook callback.
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  afterAgreementTerminated: {
    (
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      cbdata: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Callback before a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementCreated(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Callback after a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementCreated: {
      (
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Callback before a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementUpdated(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Callback after a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementUpdated: {
      (
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Callback before a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementTerminated(
      superToken: string,
      agreementClass: string,
      agreementId: string,
      agreementData: string,
      ctx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Callback after a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementTerminated: {
      (
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        superToken: string,
        agreementClass: string,
        agreementId: string,
        agreementData: string,
        cbdata: string,
        ctx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
