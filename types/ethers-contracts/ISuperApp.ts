/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ISuperAppInterface extends utils.Interface {
  functions: {
    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "beforeAgreementCreated"
      | "afterAgreementCreated"
      | "beforeAgreementUpdated"
      | "afterAgreementUpdated"
      | "beforeAgreementTerminated"
      | "afterAgreementTerminated"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beforeAgreementCreated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementCreated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementUpdated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementUpdated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementTerminated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementTerminated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "beforeAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementTerminated",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISuperApp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISuperAppInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Callback before a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementCreated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { cbdata: string }>;

    /**
     * Callback after a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementCreated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Callback before a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementUpdated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { cbdata: string }>;

    /**
     * Callback after a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementUpdated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Callback before a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementTerminated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { cbdata: string }>;

    /**
     * Callback after a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementTerminated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Callback before a new agreement is created.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  beforeAgreementCreated(
    superToken: PromiseOrValue<string>,
    agreementClass: PromiseOrValue<string>,
    agreementId: PromiseOrValue<BytesLike>,
    agreementData: PromiseOrValue<BytesLike>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Callback after a new agreement is created.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param cbdata The data returned from the before-hook callback.
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  afterAgreementCreated(
    superToken: PromiseOrValue<string>,
    agreementClass: PromiseOrValue<string>,
    agreementId: PromiseOrValue<BytesLike>,
    agreementData: PromiseOrValue<BytesLike>,
    cbdata: PromiseOrValue<BytesLike>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Callback before a new agreement is updated.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  beforeAgreementUpdated(
    superToken: PromiseOrValue<string>,
    agreementClass: PromiseOrValue<string>,
    agreementId: PromiseOrValue<BytesLike>,
    agreementData: PromiseOrValue<BytesLike>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Callback after a new agreement is updated.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param cbdata The data returned from the before-hook callback.
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  afterAgreementUpdated(
    superToken: PromiseOrValue<string>,
    agreementClass: PromiseOrValue<string>,
    agreementId: PromiseOrValue<BytesLike>,
    agreementData: PromiseOrValue<BytesLike>,
    cbdata: PromiseOrValue<BytesLike>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Callback before a new agreement is terminated.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  beforeAgreementTerminated(
    superToken: PromiseOrValue<string>,
    agreementClass: PromiseOrValue<string>,
    agreementId: PromiseOrValue<BytesLike>,
    agreementData: PromiseOrValue<BytesLike>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Callback after a new agreement is terminated.
   * @param agreementClass The agreement class address.
   * @param agreementData The agreement data (non-compressed)
   * @param agreementId The agreementId
   * @param cbdata The data returned from the before-hook callback.
   * @param ctx The context data.
   * @param superToken The super token used for the agreement.
   */
  afterAgreementTerminated(
    superToken: PromiseOrValue<string>,
    agreementClass: PromiseOrValue<string>,
    agreementId: PromiseOrValue<BytesLike>,
    agreementData: PromiseOrValue<BytesLike>,
    cbdata: PromiseOrValue<BytesLike>,
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Callback before a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementCreated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Callback after a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementCreated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Callback before a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementUpdated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Callback after a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementUpdated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Callback before a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementTerminated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Callback after a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementTerminated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Callback before a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementCreated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Callback after a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementCreated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Callback before a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementUpdated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Callback after a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementUpdated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Callback before a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementTerminated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Callback after a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementTerminated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Callback before a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementCreated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Callback after a new agreement is created.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementCreated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Callback before a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementUpdated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Callback after a new agreement is updated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementUpdated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Callback before a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    beforeAgreementTerminated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Callback after a new agreement is terminated.
     * @param agreementClass The agreement class address.
     * @param agreementData The agreement data (non-compressed)
     * @param agreementId The agreementId
     * @param cbdata The data returned from the before-hook callback.
     * @param ctx The context data.
     * @param superToken The super token used for the agreement.
     */
    afterAgreementTerminated(
      superToken: PromiseOrValue<string>,
      agreementClass: PromiseOrValue<string>,
      agreementId: PromiseOrValue<BytesLike>,
      agreementData: PromiseOrValue<BytesLike>,
      cbdata: PromiseOrValue<BytesLike>,
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
